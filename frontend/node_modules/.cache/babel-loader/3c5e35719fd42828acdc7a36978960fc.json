{"ast":null,"code":"var _jsxFileName = \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/components/dynamic-search/SearchBar.jsx\",\n    _s = $RefreshSig$();\n\nimport { React, useState, useContext } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DataContext from \"../../contexts/DataContext\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function SearchBar(props) {\n  _s();\n\n  const {\n    state\n  } = useContext(DataContext);\n  const coffees = Object.values(state.coffees);\n  const [autoCompleteOpen, setAutoCompleteOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const useStyles = makeStyles(theme => ({\n    inputRoot: {\n      color: \"inherit\"\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"20ch\"\n      }\n    },\n    autoComplete: {\n      border: \"1px solid #d3d3d3\",\n      borderRadius: \"2rem\",\n      [theme.breakpoints.up(\"xs\")]: {\n        width: \"30ch\"\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"90ch\"\n      }\n    }\n  }));\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(Autocomplete, {\n    id: \"Search Bar\",\n    options: coffees,\n    className: classes.autoComplete,\n    getOptionLabel: option => `${option.brand} ${option.name}` //set autocomplete to only open on input\n    ,\n    open: autoCompleteOpen,\n    onInputChange: (event, value, reason) => {\n      switch (reason) {\n        case \"input\":\n          setAutoCompleteOpen(!!value);\n          break;\n\n        case \"reset\":\n        case \"clear\":\n          setAutoCompleteOpen(false);\n          break;\n\n        default:\n          break;\n      }\n    },\n    onBlur: () => {\n      setAutoCompleteOpen(false);\n    },\n    onFocus: () => {\n      if (value) {\n        setAutoCompleteOpen(true);\n      }\n    },\n    noOptionsText: \"We can't find your coffee! Try our image search!\",\n    renderInput: params => {\n      const {\n        InputLabelProps,\n        InputProps,\n        ...rest\n      } = params;\n      return /*#__PURE__*/_jsxDEV(InputBase, {\n        placeholder: \"Search\\u2026\",\n        value: value,\n        classes: {\n          root: classes.inputRoot,\n          input: classes.inputInput\n        },\n        ...params.InputProps,\n        ...rest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this);\n    },\n    renderOption: option => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            cursor: \"pointer\",\n            backgroundColor: \"transparent\"\n          },\n          onClick: () => {\n            window.location.href = `/coffees/${option.id}`;\n          },\n          onKeyDown: () => {\n            window.location.href = `/coffees/${option.id}`;\n          },\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              display: \"flex\",\n              flexDirection: \"row\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: option.image_url,\n              height: 100,\n              width: 100,\n              style: {\n                marginRight: \"1em\"\n              },\n              alt: option.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                display: \"flex\",\n                flexDirection: \"column\",\n                justifyContent: \"space-around\"\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: option.brand\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                style: {\n                  marginTop: \"-10px\"\n                },\n                children: option.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 106,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n\n_s(SearchBar, \"dCgBC2zfvfhHFD2gAN5PadgWVaU=\", true);\n\n_c = SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/components/dynamic-search/SearchBar.jsx"],"names":["React","useState","useContext","Autocomplete","makeStyles","DataContext","InputBase","SearchBar","props","state","coffees","Object","values","autoCompleteOpen","setAutoCompleteOpen","value","setValue","useStyles","theme","inputRoot","color","inputInput","padding","spacing","paddingLeft","transition","transitions","create","width","breakpoints","up","autoComplete","border","borderRadius","classes","option","brand","name","event","reason","params","InputLabelProps","InputProps","rest","root","input","cursor","backgroundColor","window","location","href","id","display","flexDirection","image_url","marginRight","justifyContent","marginTop"],"mappings":"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","sourcesContent":["import { React, useState, useContext } from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport DataContext from \"../../contexts/DataContext\";\nimport InputBase from \"@material-ui/core/InputBase\";\n\nexport default function SearchBar(props) {\n  const { state } = useContext(DataContext);\n  const coffees = Object.values(state.coffees);\n  const [autoCompleteOpen, setAutoCompleteOpen] = useState(false);\n  const [value, setValue] = useState(\"\");\n  const useStyles = makeStyles((theme) => ({\n    inputRoot: {\n      color: \"inherit\",\n    },\n    inputInput: {\n      padding: theme.spacing(1, 1, 1, 0),\n      // vertical padding + font size from searchIcon\n      paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\n      transition: theme.transitions.create(\"width\"),\n      width: \"100%\",\n      [theme.breakpoints.up(\"md\")]: {\n        width: \"20ch\",\n      },\n    },\n    autoComplete: {\n      border: \"1px solid #d3d3d3\",\n      borderRadius: \"2rem\",\n\n      [theme.breakpoints.up(\"xs\")]: {\n        width: \"30ch\",\n      },\n      [theme.breakpoints.up(\"sm\")]: {\n        width: \"90ch\",\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Autocomplete\n      id=\"Search Bar\"\n      options={coffees}\n      className={classes.autoComplete}\n      getOptionLabel={(option) => `${option.brand} ${option.name}`}\n      //set autocomplete to only open on input\n      open={autoCompleteOpen}\n      onInputChange={(event, value, reason) => {\n        switch (reason) {\n          case \"input\":\n            setAutoCompleteOpen(!!value);\n            break;\n          case \"reset\":\n          case \"clear\":\n            setAutoCompleteOpen(false);\n            break;\n          default:\n            break;\n        }\n      }}\n      onBlur={() => {\n        setAutoCompleteOpen(false);\n      }}\n      onFocus={() => {\n        if (value) {\n          setAutoCompleteOpen(true);\n        }\n      }}\n      noOptionsText=\"We can't find your coffee! Try our image search!\"\n      renderInput={(params) => {\n        const { InputLabelProps, InputProps, ...rest } = params;\n        return (\n          <InputBase\n            placeholder=\"Search…\"\n            value={value}\n            classes={{\n              root: classes.inputRoot,\n              input: classes.inputInput,\n            }}\n            {...params.InputProps}\n            {...rest}\n          />\n        );\n      }}\n      renderOption={(option) => {\n        return (\n          <>\n            <span\n              style={{ cursor: \"pointer\", backgroundColor: \"transparent\" }}\n              onClick={() => {\n                window.location.href = `/coffees/${option.id}`;\n              }}\n              onKeyDown={() => {\n                window.location.href = `/coffees/${option.id}`;\n              }}\n            >\n              <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n                <img\n                  src={option.image_url}\n                  height={100}\n                  width={100}\n                  style={{ marginRight: \"1em\" }}\n                  alt={option.name}\n                />\n                <div\n                  style={{\n                    display: \"flex\",\n                    flexDirection: \"column\",\n                    justifyContent: \"space-around\",\n                  }}\n                >\n                  <p>{option.brand}</p>\n                  <p style={{ marginTop: \"-10px\" }}>{option.name}</p>\n                </div>\n              </div>\n            </span>\n          </>\n        );\n      }}\n    />\n  );\n}\n"]},"metadata":{},"sourceType":"module"}