{"ast":null,"code":"import axios from \"axios\";\nexport function stripSearchTerms(searchObject) {\n  const strippedWords = [\"coffee\", \"decaf\", \"organic\", \"usda\", \"roast\", \"roasted\"];\n  const wordsToReplace = new RegExp(\"\\\\b\" + strippedWords.join(\"|\") + \"\\\\b\", \"gi\");\n  return searchObject.replace(/\\n/g, \" \").replace(/[.,/#!$%^&*;°•':{}=\\-_`~()]/g, \"\").replace(wordsToReplace, \"\").toLowerCase();\n}\nexport async function googleImageDetection(url) {\n  let body = JSON.stringify({\n    requests: [{\n      features: [{\n        type: \"TEXT_DETECTION\",\n        maxResults: 10\n      }],\n      image: {\n        source: {\n          imageUri: url\n        }\n      }\n    }]\n  });\n  let response = \"\";\n\n  try {\n    response = await axios.post(\"/api/search\", {\n      body\n    });\n  } catch (error) {\n    console.error(error);\n  } //If data sent back is an error message\n\n\n  if (!response || response.data.error) {\n    return [\"error\"];\n  } //If data sent back is an empty object\n  else if (Object.keys(response.data).length === 0) {\n      return [];\n    } else {\n      let finalArray = response.data.textAnnotations.map(function (obj) {\n        return obj.description;\n      });\n      return finalArray;\n    }\n}","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/components/image-search/helpers.js"],"names":["axios","stripSearchTerms","searchObject","strippedWords","wordsToReplace","RegExp","join","replace","toLowerCase","googleImageDetection","url","body","JSON","stringify","requests","features","type","maxResults","image","source","imageUri","response","post","error","console","data","Object","keys","length","finalArray","textAnnotations","map","obj","description"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,SAASC,gBAAT,CAA0BC,YAA1B,EAAwC;AAC7C,QAAMC,aAAa,GAAG,CACpB,QADoB,EAEpB,OAFoB,EAGpB,SAHoB,EAIpB,MAJoB,EAKpB,OALoB,EAMpB,SANoB,CAAtB;AAQA,QAAMC,cAAc,GAAG,IAAIC,MAAJ,CACrB,QAAQF,aAAa,CAACG,IAAd,CAAmB,GAAnB,CAAR,GAAkC,KADb,EAErB,IAFqB,CAAvB;AAKA,SAAOJ,YAAY,CAChBK,OADI,CACI,KADJ,EACW,GADX,EAEJA,OAFI,CAEI,8BAFJ,EAEoC,EAFpC,EAGJA,OAHI,CAGIH,cAHJ,EAGoB,EAHpB,EAIJI,WAJI,EAAP;AAKD;AAED,OAAO,eAAeC,oBAAf,CAAoCC,GAApC,EAAyC;AAC9C,MAAIC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxBC,IAAAA,QAAQ,EAAE,CACR;AACEC,MAAAA,QAAQ,EAAE,CAAC;AAAEC,QAAAA,IAAI,EAAE,gBAAR;AAA0BC,QAAAA,UAAU,EAAE;AAAtC,OAAD,CADZ;AAEEC,MAAAA,KAAK,EAAE;AACLC,QAAAA,MAAM,EAAE;AACNC,UAAAA,QAAQ,EAAEV;AADJ;AADH;AAFT,KADQ;AADc,GAAf,CAAX;AAaA,MAAIW,QAAQ,GAAG,EAAf;;AAEA,MAAI;AACFA,IAAAA,QAAQ,GAAG,MAAMrB,KAAK,CAACsB,IAAN,CAAW,aAAX,EAA0B;AAAEX,MAAAA;AAAF,KAA1B,CAAjB;AACD,GAFD,CAEE,OAAOY,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACD,GApB6C,CAsB9C;;;AACA,MAAI,CAACF,QAAD,IAAaA,QAAQ,CAACI,IAAT,CAAcF,KAA/B,EAAsC;AACpC,WAAO,CAAC,OAAD,CAAP;AACD,GAFD,CAGA;AAHA,OAIK,IAAIG,MAAM,CAACC,IAAP,CAAYN,QAAQ,CAACI,IAArB,EAA2BG,MAA3B,KAAsC,CAA1C,EAA6C;AAChD,aAAO,EAAP;AACD,KAFI,MAEE;AACL,UAAIC,UAAU,GAAGR,QAAQ,CAACI,IAAT,CAAcK,eAAd,CAA8BC,GAA9B,CAAkC,UAAUC,GAAV,EAAe;AAChE,eAAOA,GAAG,CAACC,WAAX;AACD,OAFgB,CAAjB;AAIA,aAAOJ,UAAP;AACD;AACF","sourcesContent":["import axios from \"axios\";\n\nexport function stripSearchTerms(searchObject) {\n  const strippedWords = [\n    \"coffee\",\n    \"decaf\",\n    \"organic\",\n    \"usda\",\n    \"roast\",\n    \"roasted\",\n  ];\n  const wordsToReplace = new RegExp(\n    \"\\\\b\" + strippedWords.join(\"|\") + \"\\\\b\",\n    \"gi\"\n  );\n\n  return searchObject\n    .replace(/\\n/g, \" \")\n    .replace(/[.,/#!$%^&*;°•':{}=\\-_`~()]/g, \"\")\n    .replace(wordsToReplace, \"\")\n    .toLowerCase();\n}\n\nexport async function googleImageDetection(url) {\n  let body = JSON.stringify({\n    requests: [\n      {\n        features: [{ type: \"TEXT_DETECTION\", maxResults: 10 }],\n        image: {\n          source: {\n            imageUri: url,\n          },\n        },\n      },\n    ],\n  });\n\n  let response = \"\";\n\n  try {\n    response = await axios.post(\"/api/search\", { body });\n  } catch (error) {\n    console.error(error);\n  }\n\n  //If data sent back is an error message\n  if (!response || response.data.error) {\n    return [\"error\"];\n  }\n  //If data sent back is an empty object\n  else if (Object.keys(response.data).length === 0) {\n    return [];\n  } else {\n    let finalArray = response.data.textAnnotations.map(function (obj) {\n      return obj.description;\n    });\n\n    return finalArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}