{"ast":null,"code":"import _classCallCheck from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n// do not edit .js files directly - edit src/index.jst\nvar fastDeepEqual = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n    var length, i, keys;\n\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n\n      for (i = length; i-- !== 0;) {\n        if (!equal(a[i], b[i])) return false;\n      }\n\n      return true;\n    }\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;) {\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n    }\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  } // true if both NaN, false otherwise\n\n\n  return a !== a && b !== b;\n};\n/**\r\n * Copyright 2019 Google LLC. All Rights Reserved.\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at.\r\n *\r\n *      Http://www.apache.org/licenses/LICENSE-2.0.\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ID = \"__googleMapsScriptId\";\n/**\r\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\r\n * dynamically using\r\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\r\n * It works by dynamically creating and appending a script node to the the\r\n * document head and wrapping the callback function so as to return a promise.\r\n *\r\n * ```\r\n * const loader = new Loader({\r\n *   apiKey: \"\",\r\n *   version: \"weekly\",\r\n *   libraries: [\"places\"]\r\n * });\r\n *\r\n * loader.load().then(() => {\r\n *   const map = new google.maps.Map(...)\r\n * })\r\n * ```\r\n */\n\nvar Loader = /*#__PURE__*/function () {\n  /**\r\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\r\n   * using this library, instead the defaults are set by the Google Maps\r\n   * JavaScript API server.\r\n   *\r\n   * ```\r\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\r\n   * ```\r\n   */\n  function Loader(_ref) {\n    var apiKey = _ref.apiKey,\n        channel = _ref.channel,\n        client = _ref.client,\n        _ref$id = _ref.id,\n        id = _ref$id === void 0 ? DEFAULT_ID : _ref$id,\n        _ref$libraries = _ref.libraries,\n        libraries = _ref$libraries === void 0 ? [] : _ref$libraries,\n        language = _ref.language,\n        region = _ref.region,\n        version = _ref.version,\n        mapIds = _ref.mapIds,\n        nonce = _ref.nonce,\n        _ref$retries = _ref.retries,\n        retries = _ref$retries === void 0 ? 3 : _ref$retries,\n        _ref$url = _ref.url,\n        url = _ref$url === void 0 ? \"https://maps.googleapis.com/maps/api/js\" : _ref$url;\n\n    _classCallCheck(this, Loader);\n\n    this.CALLBACK = \"__googleMapsCallback\";\n    this.callbacks = [];\n    this.done = false;\n    this.loading = false;\n    this.errors = [];\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.retries = retries;\n    this.url = url;\n\n    if (Loader.instance) {\n      if (!fastDeepEqual(this.options, Loader.instance.options)) {\n        throw new Error(\"Loader must not be called again with different options. \".concat(JSON.stringify(this.options), \" !== \").concat(JSON.stringify(Loader.instance.options)));\n      }\n\n      return Loader.instance;\n    }\n\n    Loader.instance = this;\n  }\n\n  _createClass(Loader, [{\n    key: \"options\",\n    get: function get() {\n      return {\n        version: this.version,\n        apiKey: this.apiKey,\n        channel: this.channel,\n        client: this.client,\n        id: this.id,\n        libraries: this.libraries,\n        language: this.language,\n        region: this.region,\n        mapIds: this.mapIds,\n        nonce: this.nonce,\n        url: this.url\n      };\n    }\n    /**\r\n     * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\r\n     *\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"createUrl\",\n    value: function createUrl() {\n      var url = this.url;\n      url += \"?callback=\".concat(this.CALLBACK);\n\n      if (this.apiKey) {\n        url += \"&key=\".concat(this.apiKey);\n      }\n\n      if (this.channel) {\n        url += \"&channel=\".concat(this.channel);\n      }\n\n      if (this.client) {\n        url += \"&client=\".concat(this.client);\n      }\n\n      if (this.libraries.length > 0) {\n        url += \"&libraries=\".concat(this.libraries.join(\",\"));\n      }\n\n      if (this.language) {\n        url += \"&language=\".concat(this.language);\n      }\n\n      if (this.region) {\n        url += \"&region=\".concat(this.region);\n      }\n\n      if (this.version) {\n        url += \"&v=\".concat(this.version);\n      }\n\n      if (this.mapIds) {\n        url += \"&map_ids=\".concat(this.mapIds.join(\",\"));\n      }\n\n      return url;\n    }\n    /**\r\n     * Load the Google Maps JavaScript API script and return a Promise.\r\n     */\n\n  }, {\n    key: \"load\",\n    value: function load() {\n      return this.loadPromise();\n    }\n    /**\r\n     * Load the Google Maps JavaScript API script and return a Promise.\r\n     *\r\n     * @ignore\r\n     */\n\n  }, {\n    key: \"loadPromise\",\n    value: function loadPromise() {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        _this.loadCallback(function (err) {\n          if (!err) {\n            resolve();\n          } else {\n            reject(err);\n          }\n        });\n      });\n    }\n    /**\r\n     * Load the Google Maps JavaScript API script with a callback.\r\n     */\n\n  }, {\n    key: \"loadCallback\",\n    value: function loadCallback(fn) {\n      this.callbacks.push(fn);\n      this.execute();\n    }\n    /**\r\n     * Set the script on document.\r\n     */\n\n  }, {\n    key: \"setScript\",\n    value: function setScript() {\n      if (document.getElementById(this.id)) {\n        // TODO wrap onerror callback for cases where the script was loaded elsewhere\n        this.callback();\n        return;\n      }\n\n      var url = this.createUrl();\n      var script = document.createElement(\"script\");\n      script.id = this.id;\n      script.type = \"text/javascript\";\n      script.src = url;\n      script.onerror = this.loadErrorCallback.bind(this);\n      script.defer = true;\n      script.async = true;\n\n      if (this.nonce) {\n        script.nonce = this.nonce;\n      }\n\n      document.head.appendChild(script);\n    }\n  }, {\n    key: \"deleteScript\",\n    value: function deleteScript() {\n      var script = document.getElementById(this.id);\n\n      if (script) {\n        script.remove();\n      }\n    }\n  }, {\n    key: \"resetIfRetryingFailed\",\n    value: function resetIfRetryingFailed() {\n      var possibleAttempts = this.retries + 1;\n\n      if (this.done && !this.loading && this.errors.length >= possibleAttempts) {\n        this.deleteScript();\n        this.done = false;\n        this.loading = false;\n        this.errors = [];\n      }\n    }\n  }, {\n    key: \"loadErrorCallback\",\n    value: function loadErrorCallback(e) {\n      var _this2 = this;\n\n      this.errors.push(e);\n\n      if (this.errors.length <= this.retries) {\n        var delay = this.errors.length * Math.pow(2, this.errors.length);\n        console.log(\"Failed to load Google Maps script, retrying in \".concat(delay, \" ms.\"));\n        setTimeout(function () {\n          _this2.deleteScript();\n\n          _this2.setScript();\n        }, delay);\n      } else {\n        this.onerrorEvent = e;\n        this.callback();\n      }\n    }\n  }, {\n    key: \"setCallback\",\n    value: function setCallback() {\n      window.__googleMapsCallback = this.callback.bind(this);\n    }\n  }, {\n    key: \"callback\",\n    value: function callback() {\n      var _this3 = this;\n\n      this.done = true;\n      this.loading = false;\n      this.callbacks.forEach(function (cb) {\n        cb(_this3.onerrorEvent);\n      });\n      this.callbacks = [];\n    }\n  }, {\n    key: \"execute\",\n    value: function execute() {\n      if (window.google && window.google.maps && window.google.maps.version) {\n        console.warn(\"Aborted attempt to load Google Maps JS with @googlemaps/js-api-loader.\" + \"This may result in undesirable behavior as script parameters may not match.\");\n        this.callback();\n      }\n\n      this.resetIfRetryingFailed();\n\n      if (this.done) {\n        this.callback();\n      } else {\n        if (this.loading) ;else {\n          this.loading = true;\n          this.setCallback();\n          this.setScript();\n        }\n      }\n    }\n  }]);\n\n  return Loader;\n}();\n\nexport { DEFAULT_ID, Loader };","map":{"version":3,"sources":["../node_modules/fast-deep-equal/index.js","../src/index.ts"],"names":["isEqual"],"mappings":"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","sourcesContent":["'use strict';\n\n// do not edit .js files directly - edit src/index.jst\n\n\n\nmodule.exports = function equal(a, b) {\n  if (a === b) return true;\n\n  if (a && b && typeof a == 'object' && typeof b == 'object') {\n    if (a.constructor !== b.constructor) return false;\n\n    var length, i, keys;\n    if (Array.isArray(a)) {\n      length = a.length;\n      if (length != b.length) return false;\n      for (i = length; i-- !== 0;)\n        if (!equal(a[i], b[i])) return false;\n      return true;\n    }\n\n\n\n    if (a.constructor === RegExp) return a.source === b.source && a.flags === b.flags;\n    if (a.valueOf !== Object.prototype.valueOf) return a.valueOf() === b.valueOf();\n    if (a.toString !== Object.prototype.toString) return a.toString() === b.toString();\n\n    keys = Object.keys(a);\n    length = keys.length;\n    if (length !== Object.keys(b).length) return false;\n\n    for (i = length; i-- !== 0;)\n      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) return false;\n\n    for (i = length; i-- !== 0;) {\n      var key = keys[i];\n\n      if (!equal(a[key], b[key])) return false;\n    }\n\n    return true;\n  }\n\n  // true if both NaN, false otherwise\n  return a!==a && b!==b;\n};\n","/**\n * Copyright 2019 Google LLC. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at.\n *\n *      Http://www.apache.org/licenses/LICENSE-2.0.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport isEqual from \"fast-deep-equal\";\n\n/**\n * @ignore\n */\ndeclare global {\n  interface Window {\n    __googleMapsCallback: (e: Event) => void;\n  }\n}\n\nexport const DEFAULT_ID = \"__googleMapsScriptId\";\n\ntype Libraries = (\n  | \"drawing\"\n  | \"geometry\"\n  | \"localContext\"\n  | \"places\"\n  | \"visualization\"\n)[];\n\n/**\n * The Google Maps JavaScript API\n * [documentation](https://developers.google.com/maps/documentation/javascript/tutorial)\n * is the authoritative source for [[LoaderOptions]].\n/**\n * Loader options\n */\nexport interface LoaderOptions {\n  /**\n   * See https://developers.google.com/maps/documentation/javascript/get-api-key.\n   */\n  apiKey: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview.\n   */\n  channel?: string;\n  /**\n   * @deprecated See https://developers.google.com/maps/premium/overview, use `apiKey` instead.\n   */\n  client?: string;\n  /**\n   * In your application you can specify release channels or version numbers:\n   *\n   * The weekly version is specified with `version=weekly`. This version is\n   * updated once per week, and is the most current.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly'});\n   * ```\n   *\n   * The quarterly version is specified with `version=quarterly`. This version\n   * is updated once per quarter, and is the most predictable.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'quarterly'});\n   * ```\n   *\n   * The version number is specified with `version=n.nn`. You can choose\n   * `version=3.40`, `version=3.39`, or `version=3.38`. Version numbers are\n   * updated once per quarter.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: '3.40'});\n   * ```\n   *\n   * If you do not explicitly specify a version, you will receive the\n   * weekly version by default.\n   */\n  version?: string;\n  /**\n   * The id of the script tag. Before adding a new script, the Loader will check for an existing one.\n   */\n  id?: string;\n  /**\n   * When loading the Maps JavaScript API via the URL you may optionally load\n   * additional libraries through use of the libraries URL parameter. Libraries\n   * are modules of code that provide additional functionality to the main Maps\n   * JavaScript API but are not loaded unless you specifically request them.\n   *\n   * ```\n   * const loader = Loader({\n   *  apiKey,\n   *  libraries: ['drawing', 'geometry', 'places', 'visualization'],\n   * });\n   * ```\n   *\n   * Set the [list of libraries](https://developers.google.com/maps/documentation/javascript/libraries) for more options.\n   */\n  libraries?: Libraries;\n  /**\n   * By default, the Maps JavaScript API uses the user's preferred language\n   * setting as specified in the browser, when displaying textual information\n   * such as the names for controls, copyright notices, driving directions and\n   * labels on maps. In most cases, it's preferable to respect the browser\n   * setting. However, if you want the Maps JavaScript API to ignore the\n   * browser's language setting, you can force it to display information in a\n   * particular language when loading the Maps JavaScript API code.\n   *\n   * For example, the following example localizes the language to the United\n   * Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, language: 'ja', region: 'JP'});\n   * ```\n   *\n   * See the [list of supported\n   * languages](https://developers.google.com/maps/faq#languagesupport). Note\n   * that new languages are added often, so this list may not be exhaustive.\n   *\n   */\n  language?: string;\n  /**\n   * When you load the Maps JavaScript API from maps.googleapis.com it applies a\n   * default bias for application behavior towards the United States. If you\n   * want to alter your application to serve different map tiles or bias the\n   * application (such as biasing geocoding results towards the region), you can\n   * override this default behavior by adding a region parameter when loading\n   * the Maps JavaScript API code.\n   *\n   * The region parameter accepts Unicode region subtag identifiers which\n   * (generally) have a one-to-one mapping to country code Top-Level Domains\n   * (ccTLDs). Most Unicode region identifiers are identical to ISO 3166-1\n   * codes, with some notable exceptions. For example, Great Britain's ccTLD is\n   * \"uk\" (corresponding to the domain .co.uk) while its region identifier is\n   * \"GB.\"\n   *\n   * For example, the following example localizes the map to the United Kingdom:\n   *\n   * ```\n   * const loader = Loader({apiKey, region: 'GB'});\n   * ```\n   */\n  region?: string;\n  /**\n   * (Beta) You can add multiple Map IDs to your map using the map_ids paramenter in\n   * your bootstrap request.\n   */\n  mapIds?: string[];\n  /**\n   * Use a custom url and path to load the Google Maps API script.\n   */\n  url?: string;\n  /**\n   * Use a cryptographic nonce attribute.\n   */\n  nonce?: string;\n  /**\n   * The number of script load retries.\n   */\n  retries?: number;\n}\n\n/**\n * [[Loader]] makes it easier to add Google Maps JavaScript API to your application\n * dynamically using\n * [Promises](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise).\n * It works by dynamically creating and appending a script node to the the\n * document head and wrapping the callback function so as to return a promise.\n *\n * ```\n * const loader = new Loader({\n *   apiKey: \"\",\n *   version: \"weekly\",\n *   libraries: [\"places\"]\n * });\n *\n * loader.load().then(() => {\n *   const map = new google.maps.Map(...)\n * })\n * ```\n */\nexport class Loader {\n  /**\n   * See [[LoaderOptions.version]]\n   */\n  version: string;\n  /**\n   * See [[LoaderOptions.apiKey]]\n   */\n  apiKey: string;\n  /**\n   * See [[LoaderOptions.channel]]\n   */\n  channel: string;\n  /**\n   * See [[LoaderOptions.client]]\n   */\n  client: string;\n  /**\n   * See [[LoaderOptions.id]]\n   */\n  id: string;\n  /**\n   * See [[LoaderOptions.libraries]]\n   */\n  libraries: Libraries;\n  /**\n   * See [[LoaderOptions.language]]\n   */\n  language: string;\n\n  /**\n   * See [[LoaderOptions.region]]\n   */\n  region: string;\n\n  /**\n   * See [[LoaderOptions.mapIds]]\n   */\n  mapIds: string[];\n\n  /**\n   * See [[LoaderOptions.nonce]]\n   */\n  nonce: string | null;\n\n  /**\n   * See [[LoaderOptions.retries]]\n   */\n  retries: number;\n\n  /**\n   * See [[LoaderOptions.url]]\n   */\n  url: string;\n\n  private CALLBACK = \"__googleMapsCallback\";\n  private callbacks: ((e: Event) => void)[] = [];\n  private done = false;\n  private loading = false;\n  private onerrorEvent: Event;\n  private static instance: Loader;\n  private errors: ErrorEvent[] = [];\n\n  /**\n   * Creates an instance of Loader using [[LoaderOptions]]. No defaults are set\n   * using this library, instead the defaults are set by the Google Maps\n   * JavaScript API server.\n   *\n   * ```\n   * const loader = Loader({apiKey, version: 'weekly', libraries: ['places']});\n   * ```\n   */\n  constructor({\n    apiKey,\n    channel,\n    client,\n    id = DEFAULT_ID,\n    libraries = [],\n    language,\n    region,\n    version,\n    mapIds,\n    nonce,\n    retries = 3,\n    url = \"https://maps.googleapis.com/maps/api/js\",\n  }: LoaderOptions) {\n    this.version = version;\n    this.apiKey = apiKey;\n    this.channel = channel;\n    this.client = client;\n    this.id = id || DEFAULT_ID; // Do not allow empty string\n    this.libraries = libraries;\n    this.language = language;\n    this.region = region;\n    this.mapIds = mapIds;\n    this.nonce = nonce;\n    this.retries = retries;\n    this.url = url;\n\n    if (Loader.instance) {\n      if (!isEqual(this.options, Loader.instance.options)) {\n        throw new Error(\n          `Loader must not be called again with different options. ${JSON.stringify(\n            this.options\n          )} !== ${JSON.stringify(Loader.instance.options)}`\n        );\n      }\n\n      return Loader.instance;\n    }\n\n    Loader.instance = this;\n  }\n\n  get options(): LoaderOptions {\n    return {\n      version: this.version,\n      apiKey: this.apiKey,\n      channel: this.channel,\n      client: this.client,\n      id: this.id,\n      libraries: this.libraries,\n      language: this.language,\n      region: this.region,\n      mapIds: this.mapIds,\n      nonce: this.nonce,\n      url: this.url,\n    };\n  }\n\n  /**\n   * CreateUrl returns the Google Maps JavaScript API script url given the [[LoaderOptions]].\n   *\n   * @ignore\n   */\n  createUrl(): string {\n    let url = this.url;\n\n    url += `?callback=${this.CALLBACK}`;\n\n    if (this.apiKey) {\n      url += `&key=${this.apiKey}`;\n    }\n\n    if (this.channel) {\n      url += `&channel=${this.channel}`;\n    }\n\n    if (this.client) {\n      url += `&client=${this.client}`;\n    }\n\n    if (this.libraries.length > 0) {\n      url += `&libraries=${this.libraries.join(\",\")}`;\n    }\n\n    if (this.language) {\n      url += `&language=${this.language}`;\n    }\n\n    if (this.region) {\n      url += `&region=${this.region}`;\n    }\n\n    if (this.version) {\n      url += `&v=${this.version}`;\n    }\n\n    if (this.mapIds) {\n      url += `&map_ids=${this.mapIds.join(\",\")}`;\n    }\n\n    return url;\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   */\n  load(): Promise<void> {\n    return this.loadPromise();\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script and return a Promise.\n   *\n   * @ignore\n   */\n  loadPromise(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      this.loadCallback((err: Event) => {\n        if (!err) {\n          resolve();\n        } else {\n          reject(err);\n        }\n      });\n    });\n  }\n\n  /**\n   * Load the Google Maps JavaScript API script with a callback.\n   */\n  loadCallback(fn: (e: Event) => void): void {\n    this.callbacks.push(fn);\n    this.execute();\n  }\n\n  /**\n   * Set the script on document.\n   */\n  private setScript(): void {\n    if (document.getElementById(this.id)) {\n      // TODO wrap onerror callback for cases where the script was loaded elsewhere\n      this.callback();\n      return;\n    }\n\n    const url = this.createUrl();\n    const script = document.createElement(\"script\");\n    script.id = this.id;\n    script.type = \"text/javascript\";\n    script.src = url;\n    script.onerror = this.loadErrorCallback.bind(this);\n    script.defer = true;\n    script.async = true;\n\n    if (this.nonce) {\n      script.nonce = this.nonce;\n    }\n\n    document.head.appendChild(script);\n  }\n\n  deleteScript(): void {\n    const script = document.getElementById(this.id);\n    if (script) {\n      script.remove();\n    }\n  }\n\n  private resetIfRetryingFailed(): void {\n    const possibleAttempts = this.retries + 1;\n    if (this.done && !this.loading && this.errors.length >= possibleAttempts) {\n      this.deleteScript();\n      this.done = false;\n      this.loading = false;\n      this.errors = [];\n    }\n  }\n\n  private loadErrorCallback(e: ErrorEvent): void {\n    this.errors.push(e);\n\n    if (this.errors.length <= this.retries) {\n      const delay = this.errors.length * 2 ** this.errors.length;\n\n      console.log(\n        `Failed to load Google Maps script, retrying in ${delay} ms.`\n      );\n\n      setTimeout(() => {\n        this.deleteScript();\n        this.setScript();\n      }, delay);\n    } else {\n      this.onerrorEvent = e;\n      this.callback();\n    }\n  }\n\n  private setCallback(): void {\n    window.__googleMapsCallback = this.callback.bind(this);\n  }\n\n  private callback(): void {\n    this.done = true;\n    this.loading = false;\n\n    this.callbacks.forEach((cb) => {\n      cb(this.onerrorEvent);\n    });\n\n    this.callbacks = [];\n  }\n\n  private execute(): void {\n    if (window.google && window.google.maps && window.google.maps.version) {\n      console.warn(\n        \"Aborted attempt to load Google Maps JS with @googlemaps/js-api-loader.\" +\n          \"This may result in undesirable behavior as script parameters may not match.\"\n      );\n      this.callback();\n    }\n\n    this.resetIfRetryingFailed();\n    if (this.done) {\n      this.callback();\n    } else {\n      if (this.loading) {\n        // do nothing but wait\n      } else {\n        this.loading = true;\n        this.setCallback();\n        this.setScript();\n      }\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}