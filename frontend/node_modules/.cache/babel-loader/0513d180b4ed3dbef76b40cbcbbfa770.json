{"ast":null,"code":"/// returns array of reviews for that coffee\nexport function getReviewsForCoffee(reviews, coffeeId) {\n  const res = [];\n\n  for (const review of reviews) {\n    if (review && Number(review.coffee_id) === Number(coffeeId)) {\n      res.push(review);\n    }\n  }\n\n  return res;\n} // returns array of reviews for that coffee\n\nexport function getUserReviews(reviews, userId) {\n  const res = [];\n\n  for (const review of reviews) {\n    if (review && Number(review.user_id) === Number(userId)) {\n      res.push(review);\n    }\n  }\n\n  return res;\n} // returns avg rating of coffee\n\nexport function avgRatingForCoffee(coffeeReviews) {\n  if (!coffeeReviews.length) {\n    return;\n  }\n\n  if (coffeeReviews.length === 1) {\n    return Number(coffeeReviews[0].rating);\n  }\n\n  let sum = 0;\n\n  for (const review of coffeeReviews) {\n    sum += Number(review.rating);\n  }\n\n  return Math.round(sum / coffeeReviews.length * 10) / 10;\n} // returns array of favourites for that coffee\n\nexport function getFavouritesForCoffee(favourites, coffeeId) {\n  const res = [];\n\n  for (const fav of favourites) {\n    if (fav && Number(fav.coffee_id) === Number(coffeeId)) {\n      res.push(fav);\n    }\n  }\n\n  return res;\n} // returns array of favourites for that user\n\nexport function getFavouritesForUser(favourites, userId) {\n  const res = [];\n\n  for (const fav of favourites) {\n    if (fav && Number(fav.user_id) === Number(userId)) {\n      res.push(fav);\n    }\n  }\n\n  return res;\n} // returns the fav id if the coffee is already liked otherwise null;\n// pass in the filtered favourites array for that coffee\n\nexport function isLiked(favourites, userId) {\n  for (const fav of favourites) {\n    if (fav.user_id === userId) return fav.id;\n  }\n\n  return null;\n} // pass in filtered favourites array for that coffee\n\nexport function calcFavourites(favourites) {\n  let num = 0;\n\n  for (const fav of favourites) {\n    if (fav) {\n      num += 1;\n    }\n  }\n\n  return num;\n} // pass in filtered reviews array for that coffee\n\nexport function isReviewed(reviews, userId) {\n  if (!userId) {\n    return false;\n  }\n\n  for (const review of reviews) {\n    if (Number(review.user_id) === Number(userId)) {\n      return true;\n    }\n  }\n\n  return false;\n} // get values of coffee characteristics in all items\n\nexport function charValues(characteristics) {\n  const res = {};\n\n  for (const char of characteristics) {\n    res[char] = char;\n  }\n} // get filtered coffees\n// filterCategories are all the possible categories the user can use to filter\n// filterObj are all the filters the user has chosen\n\nexport function getFilteredCoffees(allCoffees, filterCategories, filterObj) {\n  const res = [];\n\n  if (!hasSelectedFilters(filterObj)) {\n    return allCoffees;\n  }\n\n  if (!allCoffees.length) {\n    return res;\n  } // category are things like region, acidity, roast etc ...\n\n\n  for (const category in filterObj) {\n    if (!filterObj[category] || !filterObj[category].length) {\n      continue;\n    }\n\n    for (const coffee of allCoffees) {\n      // item is a number that maps to the items in filtercategories\n      for (const item of filterObj[category]) {\n        if (coffee[category] === filterCategories[category][\"items\"][item][\"type\"]) {\n          // works if the coffee is in the same category\n          res.push(coffee);\n        }\n      }\n    } // make that category null so that the next iteration skips it\n\n\n    filterObj[category] = [];\n    return getFilteredCoffees(res, filterCategories, filterObj);\n  }\n} // checks if there are any filters selected\n\nexport function hasSelectedFilters(filters) {\n  for (const filter of Object.values(filters)) {\n    if (filter.length) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function getRegions(coffees) {\n  const res = {};\n\n  for (const coffee of coffees) {\n    res[coffee.region] = coffee.region;\n  }\n\n  return Object.values(res);\n} // format regions so that it is filterable\n\nexport function formatRegions(regions, i) {\n  const res = {};\n  let currIndex = i;\n\n  for (const region of regions) {\n    res[currIndex] = {\n      id: currIndex,\n      type: region\n    };\n    currIndex += 1;\n  }\n\n  return res;\n} // Get coffee review images by matching id\n\nexport function getReviewedCoffee(reviews, coffees) {\n  const res = [];\n\n  for (const rItem in reviews) {\n    for (const cItem in coffees) {\n      if (reviews[rItem].coffee_id === coffees[cItem].id) {\n        res.push(coffees[cItem]);\n      }\n    }\n  }\n\n  return res;\n} // Get coffee list based on user favourites\n\nexport function userFavCoffees(favourites, coffees) {\n  const res = [];\n\n  for (const fave of favourites) {\n    res.push(coffees[fave.coffee_id]);\n  }\n\n  return res;\n}","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/helpers/selectors.js"],"names":["getReviewsForCoffee","reviews","coffeeId","res","review","Number","coffee_id","push","getUserReviews","userId","user_id","avgRatingForCoffee","coffeeReviews","length","rating","sum","Math","round","getFavouritesForCoffee","favourites","fav","getFavouritesForUser","isLiked","id","calcFavourites","num","isReviewed","charValues","characteristics","char","getFilteredCoffees","allCoffees","filterCategories","filterObj","hasSelectedFilters","category","coffee","item","filters","filter","Object","values","getRegions","coffees","region","formatRegions","regions","i","currIndex","type","getReviewedCoffee","rItem","cItem","userFavCoffees","fave"],"mappings":"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","sourcesContent":["/// returns array of reviews for that coffee\nexport function getReviewsForCoffee(reviews, coffeeId) {\n  const res = [];\n\n  for (const review of reviews) {\n    if (review && Number(review.coffee_id) === Number(coffeeId)) {\n      res.push(review);\n    }\n  }\n  return res;\n}\n\n// returns array of reviews for that coffee\nexport function getUserReviews(reviews, userId) {\n  const res = [];\n\n  for (const review of reviews) {\n    if (review && Number(review.user_id) === Number(userId)) {\n      res.push(review);\n    }\n  }\n  return res;\n}\n\n// returns avg rating of coffee\nexport function avgRatingForCoffee(coffeeReviews) {\n  if (!coffeeReviews.length) {\n    return;\n  }\n\n  if (coffeeReviews.length === 1) {\n    return Number(coffeeReviews[0].rating);\n  }\n\n  let sum = 0;\n\n  for (const review of coffeeReviews) {\n    sum += Number(review.rating);\n  }\n\n  return Math.round((sum / coffeeReviews.length) * 10) / 10;\n}\n\n// returns array of favourites for that coffee\nexport function getFavouritesForCoffee(favourites, coffeeId) {\n  const res = [];\n\n  for (const fav of favourites) {\n    if (fav && Number(fav.coffee_id) === Number(coffeeId)) {\n      res.push(fav);\n    }\n  }\n  return res;\n}\n\n// returns array of favourites for that user\nexport function getFavouritesForUser(favourites, userId) {\n  const res = [];\n\n  for (const fav of favourites) {\n    if (fav && Number(fav.user_id) === Number(userId)) {\n      res.push(fav);\n    }\n  }\n  return res;\n}\n\n// returns the fav id if the coffee is already liked otherwise null;\n// pass in the filtered favourites array for that coffee\nexport function isLiked(favourites, userId) {\n  for (const fav of favourites) {\n    if (fav.user_id === userId) return fav.id;\n  }\n\n  return null;\n}\n\n// pass in filtered favourites array for that coffee\nexport function calcFavourites(favourites) {\n  let num = 0;\n\n  for (const fav of favourites) {\n    if (fav) {\n      num += 1;\n    }\n  }\n  return num;\n}\n\n// pass in filtered reviews array for that coffee\nexport function isReviewed(reviews, userId) {\n  if (!userId) {\n    return false;\n  }\n\n  for (const review of reviews) {\n    if (Number(review.user_id) === Number(userId)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\n// get values of coffee characteristics in all items\nexport function charValues(characteristics) {\n  const res = {};\n\n  for (const char of characteristics) {\n    res[char] = char;\n  }\n}\n\n// get filtered coffees\n// filterCategories are all the possible categories the user can use to filter\n// filterObj are all the filters the user has chosen\nexport function getFilteredCoffees(allCoffees, filterCategories, filterObj) {\n  const res = [];\n\n  if (!hasSelectedFilters(filterObj)) {\n    return allCoffees;\n  }\n\n  if (!allCoffees.length) {\n    return res;\n  }\n\n  // category are things like region, acidity, roast etc ...\n  for (const category in filterObj) {\n    if (!filterObj[category] || !filterObj[category].length) {\n      continue;\n    }\n    for (const coffee of allCoffees) {\n      // item is a number that maps to the items in filtercategories\n\n      for (const item of filterObj[category]) {\n        if (\n          coffee[category] === filterCategories[category][\"items\"][item][\"type\"]\n        ) {\n          // works if the coffee is in the same category\n          res.push(coffee);\n        }\n      }\n    }\n    // make that category null so that the next iteration skips it\n    filterObj[category] = [];\n    return getFilteredCoffees(res, filterCategories, filterObj);\n  }\n}\n\n// checks if there are any filters selected\nexport function hasSelectedFilters(filters) {\n  for (const filter of Object.values(filters)) {\n    if (filter.length) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport function getRegions(coffees) {\n  const res = {};\n\n  for (const coffee of coffees) {\n    res[coffee.region] = coffee.region;\n  }\n\n  return Object.values(res);\n}\n\n// format regions so that it is filterable\nexport function formatRegions(regions, i) {\n  const res = {};\n\n  let currIndex = i;\n  for (const region of regions) {\n    res[currIndex] = {\n      id: currIndex,\n      type: region,\n    };\n    currIndex += 1;\n  }\n\n  return res;\n}\n\n// Get coffee review images by matching id\nexport function getReviewedCoffee(reviews, coffees) {\n  const res = [];\n\n  for (const rItem in reviews) {\n    for (const cItem in coffees) {\n      if (reviews[rItem].coffee_id === coffees[cItem].id) {\n        res.push(coffees[cItem]);\n      }\n    }\n  }\n  return res;\n}\n\n// Get coffee list based on user favourites\nexport function userFavCoffees(favourites, coffees) {\n  const res = [];\n\n  for (const fave of favourites) {\n    res.push(coffees[fave.coffee_id]);\n  }\n  return res;\n}\n"]},"metadata":{},"sourceType":"module"}