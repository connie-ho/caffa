{"ast":null,"code":"import _regeneratorRuntime from\"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import axios from\"axios\";export function stripSearchTerms(searchObject){var strippedWords=[\"coffee\",\"decaf\",\"organic\",\"usda\",\"roast\",\"roasted\"];var wordsToReplace=new RegExp(\"\\\\b\"+strippedWords.join(\"|\")+\"\\\\b\",\"gi\");return searchObject.replace(/\\n/g,\" \").replace(/[.,/#!$%^&*;°•':{}=\\-_`~()]/g,\"\").replace(wordsToReplace,\"\").toLowerCase();}export function googleImageDetection(_x){return _googleImageDetection.apply(this,arguments);}function _googleImageDetection(){_googleImageDetection=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(url){var body,response,finalArray;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:body=JSON.stringify({requests:[{features:[{type:\"TEXT_DETECTION\",maxResults:10}],image:{source:{imageUri:url}}}]});response=\"\";_context.prev=2;_context.next=5;return axios.post(\"/api/search\",{body:body});case 5:response=_context.sent;_context.next=11;break;case 8:_context.prev=8;_context.t0=_context[\"catch\"](2);console.error(_context.t0);case 11:if(!(!response||response.data.error)){_context.next=15;break;}return _context.abrupt(\"return\",[\"error\"]);case 15:if(!(Object.keys(response.data).length===0)){_context.next=19;break;}return _context.abrupt(\"return\",[]);case 19:finalArray=response.data.textAnnotations.map(function(obj){return obj.description;});return _context.abrupt(\"return\",finalArray);case 21:case\"end\":return _context.stop();}}},_callee,null,[[2,8]]);}));return _googleImageDetection.apply(this,arguments);}","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/components/image-search/helpers.js"],"names":["axios","stripSearchTerms","searchObject","strippedWords","wordsToReplace","RegExp","join","replace","toLowerCase","googleImageDetection","url","body","JSON","stringify","requests","features","type","maxResults","image","source","imageUri","response","post","console","error","data","Object","keys","length","finalArray","textAnnotations","map","obj","description"],"mappings":"+UAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CAEA,MAAO,SAASC,CAAAA,gBAAT,CAA0BC,YAA1B,CAAwC,CAC7C,GAAMC,CAAAA,aAAa,CAAG,CACpB,QADoB,CAEpB,OAFoB,CAGpB,SAHoB,CAIpB,MAJoB,CAKpB,OALoB,CAMpB,SANoB,CAAtB,CAQA,GAAMC,CAAAA,cAAc,CAAG,GAAIC,CAAAA,MAAJ,CACrB,MAAQF,aAAa,CAACG,IAAd,CAAmB,GAAnB,CAAR,CAAkC,KADb,CAErB,IAFqB,CAAvB,CAKA,MAAOJ,CAAAA,YAAY,CAChBK,OADI,CACI,KADJ,CACW,GADX,EAEJA,OAFI,CAEI,8BAFJ,CAEoC,EAFpC,EAGJA,OAHI,CAGIH,cAHJ,CAGoB,EAHpB,EAIJI,WAJI,EAAP,CAKD,CAED,eAAsBC,CAAAA,oBAAtB,yD,+GAAO,iBAAoCC,GAApC,+IACDC,IADC,CACMC,IAAI,CAACC,SAAL,CAAe,CACxBC,QAAQ,CAAE,CACR,CACEC,QAAQ,CAAE,CAAC,CAAEC,IAAI,CAAE,gBAAR,CAA0BC,UAAU,CAAE,EAAtC,CAAD,CADZ,CAEEC,KAAK,CAAE,CACLC,MAAM,CAAE,CACNC,QAAQ,CAAEV,GADJ,CADH,CAFT,CADQ,CADc,CAAf,CADN,CAcDW,QAdC,CAcU,EAdV,uCAiBcrB,CAAAA,KAAK,CAACsB,IAAN,CAAW,aAAX,CAA0B,CAAEX,IAAI,CAAJA,IAAF,CAA1B,CAjBd,QAiBHU,QAjBG,8FAmBHE,OAAO,CAACC,KAAR,cAnBG,aAuBD,CAACH,QAAD,EAAaA,QAAQ,CAACI,IAAT,CAAcD,KAvB1B,2DAwBI,CAAC,OAAD,CAxBJ,eA2BIE,MAAM,CAACC,IAAP,CAAYN,QAAQ,CAACI,IAArB,EAA2BG,MAA3B,GAAsC,CA3B1C,2DA4BI,EA5BJ,UA8BCC,UA9BD,CA8BcR,QAAQ,CAACI,IAAT,CAAcK,eAAd,CAA8BC,GAA9B,CAAkC,SAAUC,GAAV,CAAe,CAChE,MAAOA,CAAAA,GAAG,CAACC,WAAX,CACD,CAFgB,CA9Bd,iCAkCIJ,UAlCJ,sE","sourcesContent":["import axios from \"axios\";\n\nexport function stripSearchTerms(searchObject) {\n  const strippedWords = [\n    \"coffee\",\n    \"decaf\",\n    \"organic\",\n    \"usda\",\n    \"roast\",\n    \"roasted\",\n  ];\n  const wordsToReplace = new RegExp(\n    \"\\\\b\" + strippedWords.join(\"|\") + \"\\\\b\",\n    \"gi\"\n  );\n\n  return searchObject\n    .replace(/\\n/g, \" \")\n    .replace(/[.,/#!$%^&*;°•':{}=\\-_`~()]/g, \"\")\n    .replace(wordsToReplace, \"\")\n    .toLowerCase();\n}\n\nexport async function googleImageDetection(url) {\n  let body = JSON.stringify({\n    requests: [\n      {\n        features: [{ type: \"TEXT_DETECTION\", maxResults: 10 }],\n        image: {\n          source: {\n            imageUri: url,\n          },\n        },\n      },\n    ],\n  });\n\n  let response = \"\";\n\n  try {\n    response = await axios.post(\"/api/search\", { body });\n  } catch (error) {\n    console.error(error);\n  }\n\n  //If data sent back is an error message\n  if (!response || response.data.error) {\n    return [\"error\"];\n  }\n  //If data sent back is an empty object\n  else if (Object.keys(response.data).length === 0) {\n    return [];\n  } else {\n    let finalArray = response.data.textAnnotations.map(function (obj) {\n      return obj.description;\n    });\n\n    return finalArray;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}