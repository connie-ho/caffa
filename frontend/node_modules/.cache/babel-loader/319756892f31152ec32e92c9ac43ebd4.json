{"ast":null,"code":"var _jsxFileName = \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/components/coffees/RegionSearch.jsx\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: 500,\n    \"& > * + *\": {\n      marginTop: theme.spacing(3)\n    },\n    maxHeight: \"10rem\",\n    overflow: \"auto\"\n  },\n  textField: {\n    \"& .MuiChip-root\": {\n      backgroundColor: theme.palette.primary.main,\n      color: \"white\"\n    },\n    \"& .MuiSvgIcon-root\": {\n      color: \"white\"\n    }\n  }\n}));\nexport default function RegionSearch(props) {\n  _s();\n\n  const classes = useStyles();\n  const {\n    filters,\n    setFilters,\n    handleFilters,\n    regions\n  } = props;\n  const category = \"region\";\n\n  const handleChange = (event, value) => {\n    const newCategory = [];\n\n    for (const val of value) {\n      newCategory.push(val.id);\n    }\n\n    const newFilter = { ...filters,\n      [category]: newCategory\n    };\n    setFilters(prev => newFilter);\n    handleFilters(newFilter);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.root,\n    children: /*#__PURE__*/_jsxDEV(Autocomplete, {\n      multiple: true,\n      id: \"tags-outlined\",\n      options: regions,\n      getOptionLabel: option => option.type,\n      getOptionSelected: (option, value) => option.type === value.type,\n      defaultValue: [],\n      filterSelectedOptions: true,\n      onChange: (event, value) => handleChange(event, value),\n      renderInput: params => /*#__PURE__*/_jsxDEV(TextField, { ...params,\n        variant: \"outlined\",\n        placeholder: \"Regions\",\n        className: classes.textField\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n}\n\n_s(RegionSearch, \"8g5FPXexvSEOsxdmU7HicukHGqY=\", false, function () {\n  return [useStyles];\n});\n\n_c = RegionSearch;\n\nvar _c;\n\n$RefreshReg$(_c, \"RegionSearch\");","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/components/coffees/RegionSearch.jsx"],"names":["React","Autocomplete","makeStyles","TextField","useStyles","theme","root","width","marginTop","spacing","maxHeight","overflow","textField","backgroundColor","palette","primary","main","color","RegionSearch","props","classes","filters","setFilters","handleFilters","regions","category","handleChange","event","value","newCategory","val","push","id","newFilter","prev","option","type","params"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,SAAP,MAAsB,6BAAtB;;AAEA,MAAMC,SAAS,GAAGF,UAAU,CAAEG,KAAD,KAAY;AACvCC,EAAAA,IAAI,EAAE;AACJC,IAAAA,KAAK,EAAE,GADH;AAEJ,iBAAa;AACXC,MAAAA,SAAS,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd;AADA,KAFT;AAKJC,IAAAA,SAAS,EAAE,OALP;AAMJC,IAAAA,QAAQ,EAAE;AANN,GADiC;AASvCC,EAAAA,SAAS,EAAE;AACT,uBAAmB;AACjBC,MAAAA,eAAe,EAAER,KAAK,CAACS,OAAN,CAAcC,OAAd,CAAsBC,IADtB;AAEjBC,MAAAA,KAAK,EAAE;AAFU,KADV;AAKT,0BAAsB;AACpBA,MAAAA,KAAK,EAAE;AADa;AALb;AAT4B,CAAZ,CAAD,CAA5B;AAoBA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC1C,QAAMC,OAAO,GAAGhB,SAAS,EAAzB;AACA,QAAM;AAAEiB,IAAAA,OAAF;AAAWC,IAAAA,UAAX;AAAuBC,IAAAA,aAAvB;AAAsCC,IAAAA;AAAtC,MAAkDL,KAAxD;AACA,QAAMM,QAAQ,GAAG,QAAjB;;AAEA,QAAMC,YAAY,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrC,UAAMC,WAAW,GAAG,EAApB;;AACA,SAAK,MAAMC,GAAX,IAAkBF,KAAlB,EAAyB;AACvBC,MAAAA,WAAW,CAACE,IAAZ,CAAiBD,GAAG,CAACE,EAArB;AACD;;AAED,UAAMC,SAAS,GAAG,EAChB,GAAGZ,OADa;AAEhB,OAACI,QAAD,GAAYI;AAFI,KAAlB;AAIAP,IAAAA,UAAU,CAAEY,IAAD,IAAUD,SAAX,CAAV;AACAV,IAAAA,aAAa,CAACU,SAAD,CAAb;AACD,GAZD;;AAcA,sBACE;AAAK,IAAA,SAAS,EAAEb,OAAO,CAACd,IAAxB;AAAA,2BACE,QAAC,YAAD;AACE,MAAA,QAAQ,MADV;AAEE,MAAA,EAAE,EAAC,eAFL;AAGE,MAAA,OAAO,EAAEkB,OAHX;AAIE,MAAA,cAAc,EAAGW,MAAD,IAAYA,MAAM,CAACC,IAJrC;AAKE,MAAA,iBAAiB,EAAE,CAACD,MAAD,EAASP,KAAT,KAAmBO,MAAM,CAACC,IAAP,KAAgBR,KAAK,CAACQ,IAL9D;AAME,MAAA,YAAY,EAAE,EANhB;AAOE,MAAA,qBAAqB,EAAE,IAPzB;AAQE,MAAA,QAAQ,EAAE,CAACT,KAAD,EAAQC,KAAR,KAAkBF,YAAY,CAACC,KAAD,EAAQC,KAAR,CAR1C;AASE,MAAA,WAAW,EAAGS,MAAD,iBACX,QAAC,SAAD,OACMA,MADN;AAEE,QAAA,OAAO,EAAC,UAFV;AAGE,QAAA,WAAW,EAAC,SAHd;AAIE,QAAA,SAAS,EAAEjB,OAAO,CAACR;AAJrB;AAAA;AAAA;AAAA;AAAA;AAVJ;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAsBD;;GAzCuBM,Y;UACNd,S;;;KADMc,Y","sourcesContent":["import React from \"react\";\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: 500,\n    \"& > * + *\": {\n      marginTop: theme.spacing(3),\n    },\n    maxHeight: \"10rem\",\n    overflow: \"auto\",\n  },\n  textField: {\n    \"& .MuiChip-root\": {\n      backgroundColor: theme.palette.primary.main,\n      color: \"white\",\n    },\n    \"& .MuiSvgIcon-root\": {\n      color: \"white\",\n    },\n  },\n}));\n\nexport default function RegionSearch(props) {\n  const classes = useStyles();\n  const { filters, setFilters, handleFilters, regions } = props;\n  const category = \"region\";\n\n  const handleChange = (event, value) => {\n    const newCategory = [];\n    for (const val of value) {\n      newCategory.push(val.id);\n    }\n\n    const newFilter = {\n      ...filters,\n      [category]: newCategory,\n    };\n    setFilters((prev) => newFilter);\n    handleFilters(newFilter);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Autocomplete\n        multiple\n        id=\"tags-outlined\"\n        options={regions}\n        getOptionLabel={(option) => option.type}\n        getOptionSelected={(option, value) => option.type === value.type}\n        defaultValue={[]}\n        filterSelectedOptions={true}\n        onChange={(event, value) => handleChange(event, value)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            variant=\"outlined\"\n            placeholder=\"Regions\"\n            className={classes.textField}\n          />\n        )}\n      />\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}