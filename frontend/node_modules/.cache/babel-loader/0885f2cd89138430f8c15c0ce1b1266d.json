{"ast":null,"code":"import _defineProperty from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _inherits from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _toConsumableArray from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _classCallCheck from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\n\nvar INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  var result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n} // Checks if `value` is object-like.\n\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nvar EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nvar INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nvar LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = function LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key) {\n  return \"Invalid value for key \".concat(key);\n};\n\nvar PATTERN_LENGTH_TOO_LARGE = function PATTERN_LENGTH_TOO_LARGE(max) {\n  return \"Pattern length exceeds max of \".concat(max, \".\");\n};\n\nvar MISSING_KEY_PROPERTY = function MISSING_KEY_PROPERTY(name) {\n  return \"Missing \".concat(name, \" property in key\");\n};\n\nvar INVALID_KEY_WEIGHT_VALUE = function INVALID_KEY_WEIGHT_VALUE(key) {\n  return \"Property 'weight' in key '\".concat(key, \"' must be a positive integer\");\n};\n\nvar hasOwn = Object.prototype.hasOwnProperty;\n\nvar KeyStore = /*#__PURE__*/function () {\n  function KeyStore(keys) {\n    var _this = this;\n\n    _classCallCheck(this, KeyStore);\n\n    this._keys = [];\n    this._keyMap = {};\n    var totalWeight = 0;\n    keys.forEach(function (key) {\n      var obj = createKey(key);\n      totalWeight += obj.weight;\n\n      _this._keys.push(obj);\n\n      _this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(function (key) {\n      key.weight /= totalWeight;\n    });\n  }\n\n  _createClass(KeyStore, [{\n    key: \"get\",\n    value: function get(keyId) {\n      return this._keyMap[keyId];\n    }\n  }, {\n    key: \"keys\",\n    value: function keys() {\n      return this._keys;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return JSON.stringify(this._keys);\n    }\n  }]);\n\n  return KeyStore;\n}();\n\nfunction createKey(key) {\n  var path = null;\n  var id = null;\n  var src = null;\n  var weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    var name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return {\n    path: path,\n    id: id,\n    weight: weight,\n    src: src\n  };\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  var list = [];\n  var arr = false;\n\n  var deepGet = function deepGet(obj, path, index) {\n    if (!isDefined(obj)) {\n      return;\n    }\n\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      var key = path[index];\n      var value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (var i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nvar MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nvar BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: function sortFn(a, b) {\n    return a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1;\n  }\n};\nvar FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nvar AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, BasicOptions), MatchOptions), FuzzyOptions), AdvancedOptions);\n\nvar SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm() {\n  var mantissa = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3;\n  var cache = new Map();\n  var m = Math.pow(10, mantissa);\n  return {\n    get: function get(value) {\n      var numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      }\n\n      var norm = 1 / Math.sqrt(numTokens); // In place of `toFixed(mantissa)`, for faster computation\n\n      var n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n    clear: function clear() {\n      cache.clear();\n    }\n  };\n}\n\nvar FuseIndex = /*#__PURE__*/function () {\n  function FuseIndex() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$getFn = _ref.getFn,\n        getFn = _ref$getFn === void 0 ? Config.getFn : _ref$getFn;\n\n    _classCallCheck(this, FuseIndex);\n\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  _createClass(FuseIndex, [{\n    key: \"setSources\",\n    value: function setSources() {\n      var docs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.docs = docs;\n    }\n  }, {\n    key: \"setIndexRecords\",\n    value: function setIndexRecords() {\n      var records = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.records = records;\n    }\n  }, {\n    key: \"setKeys\",\n    value: function setKeys() {\n      var _this2 = this;\n\n      var keys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      this.keys = keys;\n      this._keysMap = {};\n      keys.forEach(function (key, idx) {\n        _this2._keysMap[key.id] = idx;\n      });\n    }\n  }, {\n    key: \"create\",\n    value: function create() {\n      var _this3 = this;\n\n      if (this.isCreated || !this.docs.length) {\n        return;\n      }\n\n      this.isCreated = true; // List is Array<String>\n\n      if (isString(this.docs[0])) {\n        this.docs.forEach(function (doc, docIndex) {\n          _this3._addString(doc, docIndex);\n        });\n      } else {\n        // List is Array<Object>\n        this.docs.forEach(function (doc, docIndex) {\n          _this3._addObject(doc, docIndex);\n        });\n      }\n\n      this.norm.clear();\n    } // Adds a doc to the end of the index\n\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      var idx = this.size();\n\n      if (isString(doc)) {\n        this._addString(doc, idx);\n      } else {\n        this._addObject(doc, idx);\n      }\n    } // Removes the doc at the specified index of the index\n\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n      for (var i = idx, len = this.size(); i < len; i += 1) {\n        this.records[i].i -= 1;\n      }\n    }\n  }, {\n    key: \"getValueForItemAtKeyId\",\n    value: function getValueForItemAtKeyId(item, keyId) {\n      return item[this._keysMap[keyId]];\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return this.records.length;\n    }\n  }, {\n    key: \"_addString\",\n    value: function _addString(doc, docIndex) {\n      if (!isDefined(doc) || isBlank(doc)) {\n        return;\n      }\n\n      var record = {\n        v: doc,\n        i: docIndex,\n        n: this.norm.get(doc)\n      };\n      this.records.push(record);\n    }\n  }, {\n    key: \"_addObject\",\n    value: function _addObject(doc, docIndex) {\n      var _this4 = this;\n\n      var record = {\n        i: docIndex,\n        $: {}\n      }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      this.keys.forEach(function (key, keyIndex) {\n        // console.log(key)\n        var value = _this4.getFn(doc, key.path);\n\n        if (!isDefined(value)) {\n          return;\n        }\n\n        if (isArray(value)) {\n          (function () {\n            var subRecords = [];\n            var stack = [{\n              nestedArrIndex: -1,\n              value: value\n            }];\n\n            while (stack.length) {\n              var _stack$pop = stack.pop(),\n                  nestedArrIndex = _stack$pop.nestedArrIndex,\n                  _value = _stack$pop.value;\n\n              if (!isDefined(_value)) {\n                continue;\n              }\n\n              if (isString(_value) && !isBlank(_value)) {\n                var subRecord = {\n                  v: _value,\n                  i: nestedArrIndex,\n                  n: _this4.norm.get(_value)\n                };\n                subRecords.push(subRecord);\n              } else if (isArray(_value)) {\n                _value.forEach(function (item, k) {\n                  stack.push({\n                    nestedArrIndex: k,\n                    value: item\n                  });\n                });\n              }\n            }\n\n            record.$[keyIndex] = subRecords;\n          })();\n        } else if (!isBlank(value)) {\n          var subRecord = {\n            v: value,\n            n: _this4.norm.get(value)\n          };\n          record.$[keyIndex] = subRecord;\n        }\n      });\n      this.records.push(record);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        keys: this.keys,\n        records: this.records\n      };\n    }\n  }]);\n\n  return FuseIndex;\n}();\n\nfunction createIndex(keys, docs) {\n  var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref2$getFn = _ref2.getFn,\n      getFn = _ref2$getFn === void 0 ? Config.getFn : _ref2$getFn;\n\n  var myIndex = new FuseIndex({\n    getFn: getFn\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data) {\n  var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref3$getFn = _ref3.getFn,\n      getFn = _ref3$getFn === void 0 ? Config.getFn : _ref3$getFn;\n\n  var keys = data.keys,\n      records = data.records;\n  var myIndex = new FuseIndex({\n    getFn: getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction computeScore(pattern) {\n  var _ref4 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref4$errors = _ref4.errors,\n      errors = _ref4$errors === void 0 ? 0 : _ref4$errors,\n      _ref4$currentLocation = _ref4.currentLocation,\n      currentLocation = _ref4$currentLocation === void 0 ? 0 : _ref4$currentLocation,\n      _ref4$expectedLocatio = _ref4.expectedLocation,\n      expectedLocation = _ref4$expectedLocatio === void 0 ? 0 : _ref4$expectedLocatio,\n      _ref4$distance = _ref4.distance,\n      distance = _ref4$distance === void 0 ? Config.distance : _ref4$distance,\n      _ref4$ignoreLocation = _ref4.ignoreLocation,\n      ignoreLocation = _ref4$ignoreLocation === void 0 ? Config.ignoreLocation : _ref4$ignoreLocation;\n\n  var accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  var proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices() {\n  var matchmask = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var minMatchCharLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Config.minMatchCharLength;\n  var indices = [];\n  var start = -1;\n  var end = -1;\n  var i = 0;\n\n  for (var len = matchmask.length; i < len; i += 1) {\n    var match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nvar MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet) {\n  var _ref5 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},\n      _ref5$location = _ref5.location,\n      location = _ref5$location === void 0 ? Config.location : _ref5$location,\n      _ref5$distance = _ref5.distance,\n      distance = _ref5$distance === void 0 ? Config.distance : _ref5$distance,\n      _ref5$threshold = _ref5.threshold,\n      threshold = _ref5$threshold === void 0 ? Config.threshold : _ref5$threshold,\n      _ref5$findAllMatches = _ref5.findAllMatches,\n      findAllMatches = _ref5$findAllMatches === void 0 ? Config.findAllMatches : _ref5$findAllMatches,\n      _ref5$minMatchCharLen = _ref5.minMatchCharLength,\n      minMatchCharLength = _ref5$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref5$minMatchCharLen,\n      _ref5$includeMatches = _ref5.includeMatches,\n      includeMatches = _ref5$includeMatches === void 0 ? Config.includeMatches : _ref5$includeMatches,\n      _ref5$ignoreLocation = _ref5.ignoreLocation,\n      ignoreLocation = _ref5$ignoreLocation === void 0 ? Config.ignoreLocation : _ref5$ignoreLocation;\n\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  var patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  var textLen = text.length; // Handle the case when location > text.length\n\n  var expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  var currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  var bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  var computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  var matchMask = computeMatches ? Array(textLen) : [];\n  var index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    var score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      var i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  var lastBitArr = [];\n  var finalScore = 1;\n  var binMax = patternLen + textLen;\n  var mask = 1 << patternLen - 1;\n\n  for (var _i = 0; _i < patternLen; _i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    var binMin = 0;\n    var binMid = binMax;\n\n    while (binMin < binMid) {\n      var _score2 = computeScore(pattern, {\n        errors: _i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation: expectedLocation,\n        distance: distance,\n        ignoreLocation: ignoreLocation\n      });\n\n      if (_score2 <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    var start = Math.max(1, expectedLocation - binMid + 1);\n    var finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    var bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << _i) - 1;\n\n    for (var j = finish; j >= start; j -= 1) {\n      var currentLocation = j - 1;\n      var charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (_i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: _i,\n          currentLocation: currentLocation,\n          expectedLocation: expectedLocation,\n          distance: distance,\n          ignoreLocation: ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    var _score = computeScore(pattern, {\n      errors: _i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation: expectedLocation,\n      distance: distance,\n      ignoreLocation: ignoreLocation\n    });\n\n    if (_score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  var result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    var indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  var mask = {};\n\n  for (var i = 0, len = pattern.length; i < len; i += 1) {\n    var char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nvar BitapSearch = /*#__PURE__*/function () {\n  function BitapSearch(pattern) {\n    var _this5 = this;\n\n    var _ref6 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref6$location = _ref6.location,\n        location = _ref6$location === void 0 ? Config.location : _ref6$location,\n        _ref6$threshold = _ref6.threshold,\n        threshold = _ref6$threshold === void 0 ? Config.threshold : _ref6$threshold,\n        _ref6$distance = _ref6.distance,\n        distance = _ref6$distance === void 0 ? Config.distance : _ref6$distance,\n        _ref6$includeMatches = _ref6.includeMatches,\n        includeMatches = _ref6$includeMatches === void 0 ? Config.includeMatches : _ref6$includeMatches,\n        _ref6$findAllMatches = _ref6.findAllMatches,\n        findAllMatches = _ref6$findAllMatches === void 0 ? Config.findAllMatches : _ref6$findAllMatches,\n        _ref6$minMatchCharLen = _ref6.minMatchCharLength,\n        minMatchCharLength = _ref6$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref6$minMatchCharLen,\n        _ref6$isCaseSensitive = _ref6.isCaseSensitive,\n        isCaseSensitive = _ref6$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref6$isCaseSensitive,\n        _ref6$ignoreLocation = _ref6.ignoreLocation,\n        ignoreLocation = _ref6$ignoreLocation === void 0 ? Config.ignoreLocation : _ref6$ignoreLocation;\n\n    _classCallCheck(this, BitapSearch);\n\n    this.options = {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    var addChunk = function addChunk(pattern, startIndex) {\n      _this5.chunks.push({\n        pattern: pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex: startIndex\n      });\n    };\n\n    var len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      var i = 0;\n      var remainder = len % MAX_BITS;\n      var end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        var startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  _createClass(BitapSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var _this$options = this.options,\n          isCaseSensitive = _this$options.isCaseSensitive,\n          includeMatches = _this$options.includeMatches;\n\n      if (!isCaseSensitive) {\n        text = text.toLowerCase();\n      } // Exact match\n\n\n      if (this.pattern === text) {\n        var _result = {\n          isMatch: true,\n          score: 0\n        };\n\n        if (includeMatches) {\n          _result.indices = [[0, text.length - 1]];\n        }\n\n        return _result;\n      } // Otherwise, use Bitap algorithm\n\n\n      var _this$options2 = this.options,\n          location = _this$options2.location,\n          distance = _this$options2.distance,\n          threshold = _this$options2.threshold,\n          findAllMatches = _this$options2.findAllMatches,\n          minMatchCharLength = _this$options2.minMatchCharLength,\n          ignoreLocation = _this$options2.ignoreLocation;\n      var allIndices = [];\n      var totalScore = 0;\n      var hasMatches = false;\n      this.chunks.forEach(function (_ref7) {\n        var pattern = _ref7.pattern,\n            alphabet = _ref7.alphabet,\n            startIndex = _ref7.startIndex;\n\n        var _search = search(text, pattern, alphabet, {\n          location: location + startIndex,\n          distance: distance,\n          threshold: threshold,\n          findAllMatches: findAllMatches,\n          minMatchCharLength: minMatchCharLength,\n          includeMatches: includeMatches,\n          ignoreLocation: ignoreLocation\n        }),\n            isMatch = _search.isMatch,\n            score = _search.score,\n            indices = _search.indices;\n\n        if (isMatch) {\n          hasMatches = true;\n        }\n\n        totalScore += score;\n\n        if (isMatch && indices) {\n          allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n        }\n      });\n      var result = {\n        isMatch: hasMatches,\n        score: hasMatches ? totalScore / this.chunks.length : 1\n      };\n\n      if (hasMatches && includeMatches) {\n        result.indices = allIndices;\n      }\n\n      return result;\n    }\n  }]);\n\n  return BitapSearch;\n}();\n\nvar BaseMatch = /*#__PURE__*/function () {\n  function BaseMatch(pattern) {\n    _classCallCheck(this, BaseMatch);\n\n    this.pattern = pattern;\n  }\n\n  _createClass(BaseMatch, [{\n    key: \"search\",\n    value: function search()\n    /*text*/\n    {}\n  }], [{\n    key: \"isMultiMatch\",\n    value: function isMultiMatch(pattern) {\n      return getMatch(pattern, this.multiRegex);\n    }\n  }, {\n    key: \"isSingleMatch\",\n    value: function isSingleMatch(pattern) {\n      return getMatch(pattern, this.singleRegex);\n    }\n  }]);\n\n  return BaseMatch;\n}();\n\nfunction getMatch(pattern, exp) {\n  var matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nvar ExactMatch = /*#__PURE__*/function (_BaseMatch) {\n  _inherits(ExactMatch, _BaseMatch);\n\n  var _super = _createSuper(ExactMatch);\n\n  function ExactMatch(pattern) {\n    _classCallCheck(this, ExactMatch);\n\n    return _super.call(this, pattern);\n  }\n\n  _createClass(ExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text === this.pattern;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^=\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^=(.*)$/;\n    }\n  }]);\n\n  return ExactMatch;\n}(BaseMatch); // Token: !fire\n\n\nvar InverseExactMatch = /*#__PURE__*/function (_BaseMatch2) {\n  _inherits(InverseExactMatch, _BaseMatch2);\n\n  var _super2 = _createSuper(InverseExactMatch);\n\n  function InverseExactMatch(pattern) {\n    _classCallCheck(this, InverseExactMatch);\n\n    return _super2.call(this, pattern);\n  }\n\n  _createClass(InverseExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var index = text.indexOf(this.pattern);\n      var isMatch = index === -1;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)$/;\n    }\n  }]);\n\n  return InverseExactMatch;\n}(BaseMatch); // Token: ^file\n\n\nvar PrefixExactMatch = /*#__PURE__*/function (_BaseMatch3) {\n  _inherits(PrefixExactMatch, _BaseMatch3);\n\n  var _super3 = _createSuper(PrefixExactMatch);\n\n  function PrefixExactMatch(pattern) {\n    _classCallCheck(this, PrefixExactMatch);\n\n    return _super3.call(this, pattern);\n  }\n\n  _createClass(PrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, this.pattern.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^\\^(.*)$/;\n    }\n  }]);\n\n  return PrefixExactMatch;\n}(BaseMatch); // Token: !^fire\n\n\nvar InversePrefixExactMatch = /*#__PURE__*/function (_BaseMatch4) {\n  _inherits(InversePrefixExactMatch, _BaseMatch4);\n\n  var _super4 = _createSuper(InversePrefixExactMatch);\n\n  function InversePrefixExactMatch(pattern) {\n    _classCallCheck(this, InversePrefixExactMatch);\n\n    return _super4.call(this, pattern);\n  }\n\n  _createClass(InversePrefixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.startsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-prefix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\\^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!\\^(.*)$/;\n    }\n  }]);\n\n  return InversePrefixExactMatch;\n}(BaseMatch); // Token: .file$\n\n\nvar SuffixExactMatch = /*#__PURE__*/function (_BaseMatch5) {\n  _inherits(SuffixExactMatch, _BaseMatch5);\n\n  var _super5 = _createSuper(SuffixExactMatch);\n\n  function SuffixExactMatch(pattern) {\n    _classCallCheck(this, SuffixExactMatch);\n\n    return _super5.call(this, pattern);\n  }\n\n  _createClass(SuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [text.length - this.pattern.length, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)\\$$/;\n    }\n  }]);\n\n  return SuffixExactMatch;\n}(BaseMatch); // Token: !.file$\n\n\nvar InverseSuffixExactMatch = /*#__PURE__*/function (_BaseMatch6) {\n  _inherits(InverseSuffixExactMatch, _BaseMatch6);\n\n  var _super6 = _createSuper(InverseSuffixExactMatch);\n\n  function InverseSuffixExactMatch(pattern) {\n    _classCallCheck(this, InverseSuffixExactMatch);\n\n    return _super6.call(this, pattern);\n  }\n\n  _createClass(InverseSuffixExactMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var isMatch = !text.endsWith(this.pattern);\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: [0, text.length - 1]\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'inverse-suffix-exact';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^!\"(.*)\"\\$$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^!(.*)\\$$/;\n    }\n  }]);\n\n  return InverseSuffixExactMatch;\n}(BaseMatch);\n\nvar FuzzyMatch = /*#__PURE__*/function (_BaseMatch7) {\n  _inherits(FuzzyMatch, _BaseMatch7);\n\n  var _super7 = _createSuper(FuzzyMatch);\n\n  function FuzzyMatch(pattern) {\n    var _this6;\n\n    var _ref8 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref8$location = _ref8.location,\n        location = _ref8$location === void 0 ? Config.location : _ref8$location,\n        _ref8$threshold = _ref8.threshold,\n        threshold = _ref8$threshold === void 0 ? Config.threshold : _ref8$threshold,\n        _ref8$distance = _ref8.distance,\n        distance = _ref8$distance === void 0 ? Config.distance : _ref8$distance,\n        _ref8$includeMatches = _ref8.includeMatches,\n        includeMatches = _ref8$includeMatches === void 0 ? Config.includeMatches : _ref8$includeMatches,\n        _ref8$findAllMatches = _ref8.findAllMatches,\n        findAllMatches = _ref8$findAllMatches === void 0 ? Config.findAllMatches : _ref8$findAllMatches,\n        _ref8$minMatchCharLen = _ref8.minMatchCharLength,\n        minMatchCharLength = _ref8$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref8$minMatchCharLen,\n        _ref8$isCaseSensitive = _ref8.isCaseSensitive,\n        isCaseSensitive = _ref8$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref8$isCaseSensitive,\n        _ref8$ignoreLocation = _ref8.ignoreLocation,\n        ignoreLocation = _ref8$ignoreLocation === void 0 ? Config.ignoreLocation : _ref8$ignoreLocation;\n\n    _classCallCheck(this, FuzzyMatch);\n\n    _this6 = _super7.call(this, pattern);\n    _this6._bitapSearch = new BitapSearch(pattern, {\n      location: location,\n      threshold: threshold,\n      distance: distance,\n      includeMatches: includeMatches,\n      findAllMatches: findAllMatches,\n      minMatchCharLength: minMatchCharLength,\n      isCaseSensitive: isCaseSensitive,\n      ignoreLocation: ignoreLocation\n    });\n    return _this6;\n  }\n\n  _createClass(FuzzyMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      return this._bitapSearch.searchIn(text);\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'fuzzy';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^(.*)$/;\n    }\n  }]);\n\n  return FuzzyMatch;\n}(BaseMatch); // Token: 'file\n\n\nvar IncludeMatch = /*#__PURE__*/function (_BaseMatch8) {\n  _inherits(IncludeMatch, _BaseMatch8);\n\n  var _super8 = _createSuper(IncludeMatch);\n\n  function IncludeMatch(pattern) {\n    _classCallCheck(this, IncludeMatch);\n\n    return _super8.call(this, pattern);\n  }\n\n  _createClass(IncludeMatch, [{\n    key: \"search\",\n    value: function search(text) {\n      var location = 0;\n      var index;\n      var indices = [];\n      var patternLen = this.pattern.length; // Get all exact matches\n\n      while ((index = text.indexOf(this.pattern, location)) > -1) {\n        location = index + patternLen;\n        indices.push([index, location - 1]);\n      }\n\n      var isMatch = !!indices.length;\n      return {\n        isMatch: isMatch,\n        score: isMatch ? 0 : 1,\n        indices: indices\n      };\n    }\n  }], [{\n    key: \"type\",\n    get: function get() {\n      return 'include';\n    }\n  }, {\n    key: \"multiRegex\",\n    get: function get() {\n      return /^'\"(.*)\"$/;\n    }\n  }, {\n    key: \"singleRegex\",\n    get: function get() {\n      return /^'(.*)$/;\n    }\n  }]);\n\n  return IncludeMatch;\n}(BaseMatch); // ❗Order is important. DO NOT CHANGE.\n\n\nvar searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nvar searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nvar SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nvar OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return pattern.split(OR_TOKEN).map(function (item) {\n    var query = item.trim().split(SPACE_RE).filter(function (item) {\n      return item && !!item.trim();\n    });\n    var results = [];\n\n    for (var i = 0, len = query.length; i < len; i += 1) {\n      var queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      var found = false;\n      var idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        var searcher = searchers[idx];\n        var token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        var _searcher = searchers[idx];\n\n        var _token = _searcher.isSingleMatch(queryItem);\n\n        if (_token) {\n          results.push(new _searcher(_token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nvar MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nvar ExtendedSearch = /*#__PURE__*/function () {\n  function ExtendedSearch(pattern) {\n    var _ref9 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        _ref9$isCaseSensitive = _ref9.isCaseSensitive,\n        isCaseSensitive = _ref9$isCaseSensitive === void 0 ? Config.isCaseSensitive : _ref9$isCaseSensitive,\n        _ref9$includeMatches = _ref9.includeMatches,\n        includeMatches = _ref9$includeMatches === void 0 ? Config.includeMatches : _ref9$includeMatches,\n        _ref9$minMatchCharLen = _ref9.minMatchCharLength,\n        minMatchCharLength = _ref9$minMatchCharLen === void 0 ? Config.minMatchCharLength : _ref9$minMatchCharLen,\n        _ref9$ignoreLocation = _ref9.ignoreLocation,\n        ignoreLocation = _ref9$ignoreLocation === void 0 ? Config.ignoreLocation : _ref9$ignoreLocation,\n        _ref9$findAllMatches = _ref9.findAllMatches,\n        findAllMatches = _ref9$findAllMatches === void 0 ? Config.findAllMatches : _ref9$findAllMatches,\n        _ref9$location = _ref9.location,\n        location = _ref9$location === void 0 ? Config.location : _ref9$location,\n        _ref9$threshold = _ref9.threshold,\n        threshold = _ref9$threshold === void 0 ? Config.threshold : _ref9$threshold,\n        _ref9$distance = _ref9.distance,\n        distance = _ref9$distance === void 0 ? Config.distance : _ref9$distance;\n\n    _classCallCheck(this, ExtendedSearch);\n\n    this.query = null;\n    this.options = {\n      isCaseSensitive: isCaseSensitive,\n      includeMatches: includeMatches,\n      minMatchCharLength: minMatchCharLength,\n      findAllMatches: findAllMatches,\n      ignoreLocation: ignoreLocation,\n      location: location,\n      threshold: threshold,\n      distance: distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  _createClass(ExtendedSearch, [{\n    key: \"searchIn\",\n    value: function searchIn(text) {\n      var query = this.query;\n\n      if (!query) {\n        return {\n          isMatch: false,\n          score: 1\n        };\n      }\n\n      var _this$options3 = this.options,\n          includeMatches = _this$options3.includeMatches,\n          isCaseSensitive = _this$options3.isCaseSensitive;\n      text = isCaseSensitive ? text : text.toLowerCase();\n      var numMatches = 0;\n      var allIndices = [];\n      var totalScore = 0; // ORs\n\n      for (var i = 0, qLen = query.length; i < qLen; i += 1) {\n        var _searchers = query[i]; // Reset indices\n\n        allIndices.length = 0;\n        numMatches = 0; // ANDs\n\n        for (var j = 0, pLen = _searchers.length; j < pLen; j += 1) {\n          var searcher = _searchers[j];\n\n          var _searcher$search = searcher.search(text),\n              isMatch = _searcher$search.isMatch,\n              indices = _searcher$search.indices,\n              score = _searcher$search.score;\n\n          if (isMatch) {\n            numMatches += 1;\n            totalScore += score;\n\n            if (includeMatches) {\n              var type = searcher.constructor.type;\n\n              if (MultiMatchSet.has(type)) {\n                allIndices = [].concat(_toConsumableArray(allIndices), _toConsumableArray(indices));\n              } else {\n                allIndices.push(indices);\n              }\n            }\n          } else {\n            totalScore = 0;\n            numMatches = 0;\n            allIndices.length = 0;\n            break;\n          }\n        } // OR condition, so if TRUE, return\n\n\n        if (numMatches) {\n          var result = {\n            isMatch: true,\n            score: totalScore / numMatches\n          };\n\n          if (includeMatches) {\n            result.indices = allIndices;\n          }\n\n          return result;\n        }\n      } // Nothing was matched\n\n\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n  }], [{\n    key: \"condition\",\n    value: function condition(_, options) {\n      return options.useExtendedSearch;\n    }\n  }]);\n\n  return ExtendedSearch;\n}();\n\nvar registeredSearchers = [];\n\nfunction register() {\n  registeredSearchers.push.apply(registeredSearchers, arguments);\n}\n\nfunction createSearcher(pattern, options) {\n  for (var i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    var searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nvar LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nvar KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nvar isExpression = function isExpression(query) {\n  return !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n};\n\nvar isPath = function isPath(query) {\n  return !!query[KeyType.PATH];\n};\n\nvar isLeaf = function isLeaf(query) {\n  return !isArray(query) && isObject(query) && !isExpression(query);\n};\n\nvar convertToExplicit = function convertToExplicit(query) {\n  return _defineProperty({}, LogicalOperator.AND, Object.keys(query).map(function (key) {\n    return _defineProperty({}, key, query[key]);\n  }));\n}; // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options) {\n  var _ref12 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref12$auto = _ref12.auto,\n      auto = _ref12$auto === void 0 ? true : _ref12$auto;\n\n  var next = function next(query) {\n    var keys = Object.keys(query);\n    var isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      var key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      var pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      var obj = {\n        keyId: createKeyId(key),\n        pattern: pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    var node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(function (key) {\n      var value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(function (item) {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n} // Practical scoring function\n\n\nfunction computeScore$1(results, _ref13) {\n  var _ref13$ignoreFieldNor = _ref13.ignoreFieldNorm,\n      ignoreFieldNorm = _ref13$ignoreFieldNor === void 0 ? Config.ignoreFieldNorm : _ref13$ignoreFieldNor;\n  results.forEach(function (result) {\n    var totalScore = 1;\n    result.matches.forEach(function (_ref14) {\n      var key = _ref14.key,\n          norm = _ref14.norm,\n          score = _ref14.score;\n      var weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  var matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(function (match) {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    var indices = match.indices,\n        value = match.value;\n    var obj = {\n      indices: indices,\n      value: value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(results, docs) {\n  var _ref15 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},\n      _ref15$includeMatches = _ref15.includeMatches,\n      includeMatches = _ref15$includeMatches === void 0 ? Config.includeMatches : _ref15$includeMatches,\n      _ref15$includeScore = _ref15.includeScore,\n      includeScore = _ref15$includeScore === void 0 ? Config.includeScore : _ref15$includeScore;\n\n  var transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(function (result) {\n    var idx = result.idx;\n    var data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(function (transformer) {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nvar Fuse = /*#__PURE__*/function () {\n  function Fuse(docs) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var index = arguments.length > 2 ? arguments[2] : undefined;\n\n    _classCallCheck(this, Fuse);\n\n    this.options = _objectSpread(_objectSpread({}, Config), options);\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  _createClass(Fuse, [{\n    key: \"setCollection\",\n    value: function setCollection(docs, index) {\n      this._docs = docs;\n\n      if (index && !(index instanceof FuseIndex)) {\n        throw new Error(INCORRECT_INDEX_TYPE);\n      }\n\n      this._myIndex = index || createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n    }\n  }, {\n    key: \"add\",\n    value: function add(doc) {\n      if (!isDefined(doc)) {\n        return;\n      }\n\n      this._docs.push(doc);\n\n      this._myIndex.add(doc);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove() {\n      var predicate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : function () {\n        return (\n          /* doc, idx */\n          false\n        );\n      };\n      var results = [];\n\n      for (var i = 0, len = this._docs.length; i < len; i += 1) {\n        var doc = this._docs[i];\n\n        if (predicate(doc, i)) {\n          this.removeAt(i);\n          i -= 1;\n          len -= 1;\n          results.push(doc);\n        }\n      }\n\n      return results;\n    }\n  }, {\n    key: \"removeAt\",\n    value: function removeAt(idx) {\n      this._docs.splice(idx, 1);\n\n      this._myIndex.removeAt(idx);\n    }\n  }, {\n    key: \"getIndex\",\n    value: function getIndex() {\n      return this._myIndex;\n    }\n  }, {\n    key: \"search\",\n    value: function search(query) {\n      var _ref16 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          _ref16$limit = _ref16.limit,\n          limit = _ref16$limit === void 0 ? -1 : _ref16$limit;\n\n      var _this$options4 = this.options,\n          includeMatches = _this$options4.includeMatches,\n          includeScore = _this$options4.includeScore,\n          shouldSort = _this$options4.shouldSort,\n          sortFn = _this$options4.sortFn,\n          ignoreFieldNorm = _this$options4.ignoreFieldNorm;\n      var results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n      computeScore$1(results, {\n        ignoreFieldNorm: ignoreFieldNorm\n      });\n\n      if (shouldSort) {\n        results.sort(sortFn);\n      }\n\n      if (isNumber(limit) && limit > -1) {\n        results = results.slice(0, limit);\n      }\n\n      return format(results, this._docs, {\n        includeMatches: includeMatches,\n        includeScore: includeScore\n      });\n    }\n  }, {\n    key: \"_searchStringList\",\n    value: function _searchStringList(query) {\n      var searcher = createSearcher(query, this.options);\n      var records = this._myIndex.records;\n      var results = []; // Iterate over every string in the index\n\n      records.forEach(function (_ref17) {\n        var text = _ref17.v,\n            idx = _ref17.i,\n            norm = _ref17.n;\n\n        if (!isDefined(text)) {\n          return;\n        }\n\n        var _searcher$searchIn = searcher.searchIn(text),\n            isMatch = _searcher$searchIn.isMatch,\n            score = _searcher$searchIn.score,\n            indices = _searcher$searchIn.indices;\n\n        if (isMatch) {\n          results.push({\n            item: text,\n            idx: idx,\n            matches: [{\n              score: score,\n              value: text,\n              norm: norm,\n              indices: indices\n            }]\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchLogical\",\n    value: function _searchLogical(query) {\n      var _this7 = this;\n\n      var expression = parse(query, this.options);\n\n      var evaluate = function evaluate(node, item, idx) {\n        if (!node.children) {\n          var keyId = node.keyId,\n              searcher = node.searcher;\n\n          var matches = _this7._findMatches({\n            key: _this7._keyStore.get(keyId),\n            value: _this7._myIndex.getValueForItemAtKeyId(item, keyId),\n            searcher: searcher\n          });\n\n          if (matches && matches.length) {\n            return [{\n              idx: idx,\n              item: item,\n              matches: matches\n            }];\n          }\n\n          return [];\n        }\n        /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n\n\n        switch (node.operator) {\n          case LogicalOperator.AND:\n            {\n              var res = [];\n\n              for (var i = 0, len = node.children.length; i < len; i += 1) {\n                var child = node.children[i];\n                var result = evaluate(child, item, idx);\n\n                if (result.length) {\n                  res.push.apply(res, _toConsumableArray(result));\n                } else {\n                  return [];\n                }\n              }\n\n              return res;\n            }\n\n          case LogicalOperator.OR:\n            {\n              var _res = [];\n\n              for (var _i2 = 0, _len = node.children.length; _i2 < _len; _i2 += 1) {\n                var _child = node.children[_i2];\n\n                var _result2 = evaluate(_child, item, idx);\n\n                if (_result2.length) {\n                  _res.push.apply(_res, _toConsumableArray(_result2));\n\n                  break;\n                }\n              }\n\n              return _res;\n            }\n        }\n      };\n\n      var records = this._myIndex.records;\n      var resultMap = {};\n      var results = [];\n      records.forEach(function (_ref18) {\n        var item = _ref18.$,\n            idx = _ref18.i;\n\n        if (isDefined(item)) {\n          var expResults = evaluate(expression, item, idx);\n\n          if (expResults.length) {\n            // Dedupe when adding\n            if (!resultMap[idx]) {\n              resultMap[idx] = {\n                idx: idx,\n                item: item,\n                matches: []\n              };\n              results.push(resultMap[idx]);\n            }\n\n            expResults.forEach(function (_ref19) {\n              var _resultMap$idx$matche;\n\n              var matches = _ref19.matches;\n\n              (_resultMap$idx$matche = resultMap[idx].matches).push.apply(_resultMap$idx$matche, _toConsumableArray(matches));\n            });\n          }\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_searchObjectList\",\n    value: function _searchObjectList(query) {\n      var _this8 = this;\n\n      var searcher = createSearcher(query, this.options);\n      var _this$_myIndex = this._myIndex,\n          keys = _this$_myIndex.keys,\n          records = _this$_myIndex.records;\n      var results = []; // List is Array<Object>\n\n      records.forEach(function (_ref20) {\n        var item = _ref20.$,\n            idx = _ref20.i;\n\n        if (!isDefined(item)) {\n          return;\n        }\n\n        var matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n        keys.forEach(function (key, keyIndex) {\n          matches.push.apply(matches, _toConsumableArray(_this8._findMatches({\n            key: key,\n            value: item[keyIndex],\n            searcher: searcher\n          })));\n        });\n\n        if (matches.length) {\n          results.push({\n            idx: idx,\n            item: item,\n            matches: matches\n          });\n        }\n      });\n      return results;\n    }\n  }, {\n    key: \"_findMatches\",\n    value: function _findMatches(_ref21) {\n      var key = _ref21.key,\n          value = _ref21.value,\n          searcher = _ref21.searcher;\n\n      if (!isDefined(value)) {\n        return [];\n      }\n\n      var matches = [];\n\n      if (isArray(value)) {\n        value.forEach(function (_ref22) {\n          var text = _ref22.v,\n              idx = _ref22.i,\n              norm = _ref22.n;\n\n          if (!isDefined(text)) {\n            return;\n          }\n\n          var _searcher$searchIn2 = searcher.searchIn(text),\n              isMatch = _searcher$searchIn2.isMatch,\n              score = _searcher$searchIn2.score,\n              indices = _searcher$searchIn2.indices;\n\n          if (isMatch) {\n            matches.push({\n              score: score,\n              key: key,\n              value: text,\n              idx: idx,\n              norm: norm,\n              indices: indices\n            });\n          }\n        });\n      } else {\n        var text = value.v,\n            _norm = value.n;\n\n        var _searcher$searchIn3 = searcher.searchIn(text),\n            isMatch = _searcher$searchIn3.isMatch,\n            score = _searcher$searchIn3.score,\n            indices = _searcher$searchIn3.indices;\n\n        if (isMatch) {\n          matches.push({\n            score: score,\n            key: key,\n            value: text,\n            norm: _norm,\n            indices: indices\n          });\n        }\n      }\n\n      return matches;\n    }\n  }]);\n\n  return Fuse;\n}();\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nexport default Fuse;","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/node_modules/fuse.js/dist/fuse.esm.js"],"names":["isArray","value","Array","getTag","INFINITY","baseToString","result","toString","isString","isNumber","isBoolean","isObjectLike","isObject","isDefined","undefined","isBlank","trim","length","Object","prototype","call","EXTENDED_SEARCH_UNAVAILABLE","INCORRECT_INDEX_TYPE","LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY","key","PATTERN_LENGTH_TOO_LARGE","max","MISSING_KEY_PROPERTY","name","INVALID_KEY_WEIGHT_VALUE","hasOwn","hasOwnProperty","KeyStore","keys","_keys","_keyMap","totalWeight","forEach","obj","createKey","weight","push","id","keyId","JSON","stringify","path","src","createKeyPath","createKeyId","Error","split","join","get","list","arr","deepGet","index","i","len","MatchOptions","includeMatches","findAllMatches","minMatchCharLength","BasicOptions","isCaseSensitive","includeScore","shouldSort","sortFn","a","b","score","idx","FuzzyOptions","location","threshold","distance","AdvancedOptions","useExtendedSearch","getFn","ignoreLocation","ignoreFieldNorm","Config","SPACE","norm","mantissa","cache","Map","m","Math","pow","numTokens","match","has","sqrt","n","parseFloat","round","set","clear","FuseIndex","isCreated","setIndexRecords","docs","records","_keysMap","doc","docIndex","_addString","_addObject","size","splice","item","record","v","$","keyIndex","subRecords","stack","nestedArrIndex","pop","subRecord","k","createIndex","myIndex","setKeys","map","setSources","create","parseIndex","data","computeScore","pattern","errors","currentLocation","expectedLocation","accuracy","proximity","abs","convertMaskToIndices","matchmask","indices","start","end","MAX_BITS","search","text","patternAlphabet","patternLen","textLen","min","currentThreshold","bestLocation","computeMatches","matchMask","indexOf","lastBitArr","finalScore","binMax","mask","binMin","binMid","floor","finish","bitArr","j","charMatch","charAt","isMatch","createPatternAlphabet","char","BitapSearch","options","toLowerCase","chunks","addChunk","startIndex","alphabet","remainder","substr","allIndices","totalScore","hasMatches","BaseMatch","getMatch","multiRegex","singleRegex","exp","matches","ExactMatch","InverseExactMatch","PrefixExactMatch","startsWith","InversePrefixExactMatch","SuffixExactMatch","endsWith","InverseSuffixExactMatch","FuzzyMatch","_bitapSearch","searchIn","IncludeMatch","searchers","searchersLen","SPACE_RE","OR_TOKEN","parseQuery","query","filter","results","queryItem","found","searcher","token","isMultiMatch","isSingleMatch","MultiMatchSet","Set","type","ExtendedSearch","numMatches","qLen","pLen","constructor","_","registeredSearchers","register","createSearcher","searcherClass","condition","LogicalOperator","AND","OR","KeyType","PATH","PATTERN","isExpression","isPath","isLeaf","convertToExplicit","parse","auto","next","isQueryPath","node","children","operator","computeScore$1","Number","EPSILON","transformMatches","refIndex","transformScore","format","transformers","transformer","Fuse","_keyStore","setCollection","_docs","_myIndex","add","predicate","removeAt","limit","_searchStringList","_searchObjectList","_searchLogical","sort","slice","expression","evaluate","_findMatches","getValueForItemAtKeyId","res","child","resultMap","expResults","version","config"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,OAAT,CAAiBC,KAAjB,EAAwB;AACtB,SAAO,CAACC,KAAK,CAACF,OAAP,GACHG,MAAM,CAACF,KAAD,CAAN,KAAkB,gBADf,GAEHC,KAAK,CAACF,OAAN,CAAcC,KAAd,CAFJ;AAGD,C,CAED;;;AACA,IAAMG,QAAQ,GAAG,IAAI,CAArB;;AACA,SAASC,YAAT,CAAsBJ,KAAtB,EAA6B;AAC3B;AACA,MAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;AAC5B,WAAOA,KAAP;AACD;;AACD,MAAIK,MAAM,GAAGL,KAAK,GAAG,EAArB;AACA,SAAOK,MAAM,IAAI,GAAV,IAAiB,IAAIL,KAAJ,IAAa,CAACG,QAA/B,GAA0C,IAA1C,GAAiDE,MAAxD;AACD;;AAED,SAASC,QAAT,CAAkBN,KAAlB,EAAyB;AACvB,SAAOA,KAAK,IAAI,IAAT,GAAgB,EAAhB,GAAqBI,YAAY,CAACJ,KAAD,CAAxC;AACD;;AAED,SAASO,QAAT,CAAkBP,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AAED,SAASQ,QAAT,CAAkBR,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,C,CAED;;;AACA,SAASS,SAAT,CAAmBT,KAAnB,EAA0B;AACxB,SACEA,KAAK,KAAK,IAAV,IACAA,KAAK,KAAK,KADV,IAECU,YAAY,CAACV,KAAD,CAAZ,IAAuBE,MAAM,CAACF,KAAD,CAAN,IAAiB,kBAH3C;AAKD;;AAED,SAASW,QAAT,CAAkBX,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD,C,CAED;;;AACA,SAASU,YAAT,CAAsBV,KAAtB,EAA6B;AAC3B,SAAOW,QAAQ,CAACX,KAAD,CAAR,IAAmBA,KAAK,KAAK,IAApC;AACD;;AAED,SAASY,SAAT,CAAmBZ,KAAnB,EAA0B;AACxB,SAAOA,KAAK,KAAKa,SAAV,IAAuBb,KAAK,KAAK,IAAxC;AACD;;AAED,SAASc,OAAT,CAAiBd,KAAjB,EAAwB;AACtB,SAAO,CAACA,KAAK,CAACe,IAAN,GAAaC,MAArB;AACD,C,CAED;AACA;;;AACA,SAASd,MAAT,CAAgBF,KAAhB,EAAuB;AACrB,SAAOA,KAAK,IAAI,IAAT,GACHA,KAAK,KAAKa,SAAV,GACE,oBADF,GAEE,eAHC,GAIHI,MAAM,CAACC,SAAP,CAAiBZ,QAAjB,CAA0Ba,IAA1B,CAA+BnB,KAA/B,CAJJ;AAKD;;AAED,IAAMoB,2BAA2B,GAAG,kCAApC;AAEA,IAAMC,oBAAoB,GAAG,wBAA7B;;AAEA,IAAMC,oCAAoC,GAAG,SAAvCA,oCAAuC,CAACC,GAAD;AAAA,yCAClBA,GADkB;AAAA,CAA7C;;AAGA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACC,GAAD;AAAA,iDACEA,GADF;AAAA,CAAjC;;AAGA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,CAACC,IAAD;AAAA,2BAAqBA,IAArB;AAAA,CAA7B;;AAEA,IAAMC,wBAAwB,GAAG,SAA3BA,wBAA2B,CAACL,GAAD;AAAA,6CACFA,GADE;AAAA,CAAjC;;AAGA,IAAMM,MAAM,GAAGZ,MAAM,CAACC,SAAP,CAAiBY,cAAhC;;IAEMC,Q;AACJ,oBAAYC,IAAZ,EAAkB;AAAA;;AAAA;;AAChB,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,OAAL,GAAe,EAAf;AAEA,QAAIC,WAAW,GAAG,CAAlB;AAEAH,IAAAA,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAS;AACpB,UAAIc,GAAG,GAAGC,SAAS,CAACf,GAAD,CAAnB;AAEAY,MAAAA,WAAW,IAAIE,GAAG,CAACE,MAAnB;;AAEA,MAAA,KAAI,CAACN,KAAL,CAAWO,IAAX,CAAgBH,GAAhB;;AACA,MAAA,KAAI,CAACH,OAAL,CAAaG,GAAG,CAACI,EAAjB,IAAuBJ,GAAvB;AAEAF,MAAAA,WAAW,IAAIE,GAAG,CAACE,MAAnB;AACD,KATD,EANgB,CAiBhB;;AACA,SAAKN,KAAL,CAAWG,OAAX,CAAmB,UAACb,GAAD,EAAS;AAC1BA,MAAAA,GAAG,CAACgB,MAAJ,IAAcJ,WAAd;AACD,KAFD;AAGD;;;;WACD,aAAIO,KAAJ,EAAW;AACT,aAAO,KAAKR,OAAL,CAAaQ,KAAb,CAAP;AACD;;;WACD,gBAAO;AACL,aAAO,KAAKT,KAAZ;AACD;;;WACD,kBAAS;AACP,aAAOU,IAAI,CAACC,SAAL,CAAe,KAAKX,KAApB,CAAP;AACD;;;;;;AAGH,SAASK,SAAT,CAAmBf,GAAnB,EAAwB;AACtB,MAAIsB,IAAI,GAAG,IAAX;AACA,MAAIJ,EAAE,GAAG,IAAT;AACA,MAAIK,GAAG,GAAG,IAAV;AACA,MAAIP,MAAM,GAAG,CAAb;;AAEA,MAAIhC,QAAQ,CAACgB,GAAD,CAAR,IAAiBxB,OAAO,CAACwB,GAAD,CAA5B,EAAmC;AACjCuB,IAAAA,GAAG,GAAGvB,GAAN;AACAsB,IAAAA,IAAI,GAAGE,aAAa,CAACxB,GAAD,CAApB;AACAkB,IAAAA,EAAE,GAAGO,WAAW,CAACzB,GAAD,CAAhB;AACD,GAJD,MAIO;AACL,QAAI,CAACM,MAAM,CAACV,IAAP,CAAYI,GAAZ,EAAiB,MAAjB,CAAL,EAA+B;AAC7B,YAAM,IAAI0B,KAAJ,CAAUvB,oBAAoB,CAAC,MAAD,CAA9B,CAAN;AACD;;AAED,QAAMC,IAAI,GAAGJ,GAAG,CAACI,IAAjB;AACAmB,IAAAA,GAAG,GAAGnB,IAAN;;AAEA,QAAIE,MAAM,CAACV,IAAP,CAAYI,GAAZ,EAAiB,QAAjB,CAAJ,EAAgC;AAC9BgB,MAAAA,MAAM,GAAGhB,GAAG,CAACgB,MAAb;;AAEA,UAAIA,MAAM,IAAI,CAAd,EAAiB;AACf,cAAM,IAAIU,KAAJ,CAAUrB,wBAAwB,CAACD,IAAD,CAAlC,CAAN;AACD;AACF;;AAEDkB,IAAAA,IAAI,GAAGE,aAAa,CAACpB,IAAD,CAApB;AACAc,IAAAA,EAAE,GAAGO,WAAW,CAACrB,IAAD,CAAhB;AACD;;AAED,SAAO;AAAEkB,IAAAA,IAAI,EAAJA,IAAF;AAAQJ,IAAAA,EAAE,EAAFA,EAAR;AAAYF,IAAAA,MAAM,EAANA,MAAZ;AAAoBO,IAAAA,GAAG,EAAHA;AAApB,GAAP;AACD;;AAED,SAASC,aAAT,CAAuBxB,GAAvB,EAA4B;AAC1B,SAAOxB,OAAO,CAACwB,GAAD,CAAP,GAAeA,GAAf,GAAqBA,GAAG,CAAC2B,KAAJ,CAAU,GAAV,CAA5B;AACD;;AAED,SAASF,WAAT,CAAqBzB,GAArB,EAA0B;AACxB,SAAOxB,OAAO,CAACwB,GAAD,CAAP,GAAeA,GAAG,CAAC4B,IAAJ,CAAS,GAAT,CAAf,GAA+B5B,GAAtC;AACD;;AAED,SAAS6B,GAAT,CAAaf,GAAb,EAAkBQ,IAAlB,EAAwB;AACtB,MAAIQ,IAAI,GAAG,EAAX;AACA,MAAIC,GAAG,GAAG,KAAV;;AAEA,MAAMC,OAAO,GAAG,SAAVA,OAAU,CAAClB,GAAD,EAAMQ,IAAN,EAAYW,KAAZ,EAAsB;AACpC,QAAI,CAAC5C,SAAS,CAACyB,GAAD,CAAd,EAAqB;AACnB;AACD;;AACD,QAAI,CAACQ,IAAI,CAACW,KAAD,CAAT,EAAkB;AAChB;AACAH,MAAAA,IAAI,CAACb,IAAL,CAAUH,GAAV;AACD,KAHD,MAGO;AACL,UAAId,GAAG,GAAGsB,IAAI,CAACW,KAAD,CAAd;AAEA,UAAMxD,KAAK,GAAGqC,GAAG,CAACd,GAAD,CAAjB;;AAEA,UAAI,CAACX,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB;AACD,OAPI,CASL;AACA;;;AACA,UACEwD,KAAK,KAAKX,IAAI,CAAC7B,MAAL,GAAc,CAAxB,KACCT,QAAQ,CAACP,KAAD,CAAR,IAAmBQ,QAAQ,CAACR,KAAD,CAA3B,IAAsCS,SAAS,CAACT,KAAD,CADhD,CADF,EAGE;AACAqD,QAAAA,IAAI,CAACb,IAAL,CAAUlC,QAAQ,CAACN,KAAD,CAAlB;AACD,OALD,MAKO,IAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AACzBsD,QAAAA,GAAG,GAAG,IAAN,CADyB,CAEzB;;AACA,aAAK,IAAIG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG1D,KAAK,CAACgB,MAA5B,EAAoCyC,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnDF,UAAAA,OAAO,CAACvD,KAAK,CAACyD,CAAD,CAAN,EAAWZ,IAAX,EAAiBW,KAAK,GAAG,CAAzB,CAAP;AACD;AACF,OANM,MAMA,IAAIX,IAAI,CAAC7B,MAAT,EAAiB;AACtB;AACAuC,QAAAA,OAAO,CAACvD,KAAD,EAAQ6C,IAAR,EAAcW,KAAK,GAAG,CAAtB,CAAP;AACD;AACF;AACF,GAlCD,CAJsB,CAwCtB;;;AACAD,EAAAA,OAAO,CAAClB,GAAD,EAAM9B,QAAQ,CAACsC,IAAD,CAAR,GAAiBA,IAAI,CAACK,KAAL,CAAW,GAAX,CAAjB,GAAmCL,IAAzC,EAA+C,CAA/C,CAAP;AAEA,SAAOS,GAAG,GAAGD,IAAH,GAAUA,IAAI,CAAC,CAAD,CAAxB;AACD;;AAED,IAAMM,YAAY,GAAG;AACnB;AACA;AACA;AACAC,EAAAA,cAAc,EAAE,KAJG;AAKnB;AACA;AACAC,EAAAA,cAAc,EAAE,KAPG;AAQnB;AACAC,EAAAA,kBAAkB,EAAE;AATD,CAArB;AAYA,IAAMC,YAAY,GAAG;AACnB;AACA;AACAC,EAAAA,eAAe,EAAE,KAHE;AAInB;AACAC,EAAAA,YAAY,EAAE,KALK;AAMnB;AACAjC,EAAAA,IAAI,EAAE,EAPa;AAQnB;AACAkC,EAAAA,UAAU,EAAE,IATO;AAUnB;AACAC,EAAAA,MAAM,EAAE,gBAACC,CAAD,EAAIC,CAAJ;AAAA,WACND,CAAC,CAACE,KAAF,KAAYD,CAAC,CAACC,KAAd,GAAuBF,CAAC,CAACG,GAAF,GAAQF,CAAC,CAACE,GAAV,GAAgB,CAAC,CAAjB,GAAqB,CAA5C,GAAiDH,CAAC,CAACE,KAAF,GAAUD,CAAC,CAACC,KAAZ,GAAoB,CAAC,CAArB,GAAyB,CADpE;AAAA;AAXW,CAArB;AAeA,IAAME,YAAY,GAAG;AACnB;AACAC,EAAAA,QAAQ,EAAE,CAFS;AAGnB;AACA;AACAC,EAAAA,SAAS,EAAE,GALQ;AAMnB;AACA;AACA;AACA;AACA;AACAC,EAAAA,QAAQ,EAAE;AAXS,CAArB;AAcA,IAAMC,eAAe,GAAG;AACtB;AACAC,EAAAA,iBAAiB,EAAE,KAFG;AAGtB;AACA;AACAC,EAAAA,KAAK,EAAE1B,GALe;AAMtB;AACA;AACA;AACA2B,EAAAA,cAAc,EAAE,KATM;AAUtB;AACA;AACA;AACAC,EAAAA,eAAe,EAAE;AAbK,CAAxB;;AAgBA,IAAIC,MAAM,+DACLlB,YADK,GAELJ,YAFK,GAGLa,YAHK,GAILI,eAJK,CAAV;;AAOA,IAAMM,KAAK,GAAG,QAAd,C,CAEA;AACA;;AACA,SAASC,IAAT,GAA4B;AAAA,MAAdC,QAAc,uEAAH,CAAG;AAC1B,MAAMC,KAAK,GAAG,IAAIC,GAAJ,EAAd;AACA,MAAMC,CAAC,GAAGC,IAAI,CAACC,GAAL,CAAS,EAAT,EAAaL,QAAb,CAAV;AAEA,SAAO;AACLhC,IAAAA,GADK,eACDpD,KADC,EACM;AACT,UAAM0F,SAAS,GAAG1F,KAAK,CAAC2F,KAAN,CAAYT,KAAZ,EAAmBlE,MAArC;;AAEA,UAAIqE,KAAK,CAACO,GAAN,CAAUF,SAAV,CAAJ,EAA0B;AACxB,eAAOL,KAAK,CAACjC,GAAN,CAAUsC,SAAV,CAAP;AACD;;AAED,UAAMP,IAAI,GAAG,IAAIK,IAAI,CAACK,IAAL,CAAUH,SAAV,CAAjB,CAPS,CAST;;AACA,UAAMI,CAAC,GAAGC,UAAU,CAACP,IAAI,CAACQ,KAAL,CAAWb,IAAI,GAAGI,CAAlB,IAAuBA,CAAxB,CAApB;AAEAF,MAAAA,KAAK,CAACY,GAAN,CAAUP,SAAV,EAAqBI,CAArB;AAEA,aAAOA,CAAP;AACD,KAhBI;AAiBLI,IAAAA,KAjBK,mBAiBG;AACNb,MAAAA,KAAK,CAACa,KAAN;AACD;AAnBI,GAAP;AAqBD;;IAEKC,S;AACJ,uBAA2C;AAAA,mFAAJ,EAAI;AAAA,0BAA7BrB,KAA6B;AAAA,QAA7BA,KAA6B,2BAArBG,MAAM,CAACH,KAAc;;AAAA;;AACzC,SAAKK,IAAL,GAAYA,IAAI,CAAC,CAAD,CAAhB;AACA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKsB,SAAL,GAAiB,KAAjB;AAEA,SAAKC,eAAL;AACD;;;;WACD,sBAAsB;AAAA,UAAXC,IAAW,uEAAJ,EAAI;AACpB,WAAKA,IAAL,GAAYA,IAAZ;AACD;;;WACD,2BAA8B;AAAA,UAAdC,OAAc,uEAAJ,EAAI;AAC5B,WAAKA,OAAL,GAAeA,OAAf;AACD;;;WACD,mBAAmB;AAAA;;AAAA,UAAXvE,IAAW,uEAAJ,EAAI;AACjB,WAAKA,IAAL,GAAYA,IAAZ;AACA,WAAKwE,QAAL,GAAgB,EAAhB;AACAxE,MAAAA,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAMgD,GAAN,EAAc;AACzB,QAAA,MAAI,CAACiC,QAAL,CAAcjF,GAAG,CAACkB,EAAlB,IAAwB8B,GAAxB;AACD,OAFD;AAGD;;;WACD,kBAAS;AAAA;;AACP,UAAI,KAAK6B,SAAL,IAAkB,CAAC,KAAKE,IAAL,CAAUtF,MAAjC,EAAyC;AACvC;AACD;;AAED,WAAKoF,SAAL,GAAiB,IAAjB,CALO,CAOP;;AACA,UAAI7F,QAAQ,CAAC,KAAK+F,IAAL,CAAU,CAAV,CAAD,CAAZ,EAA4B;AAC1B,aAAKA,IAAL,CAAUlE,OAAV,CAAkB,UAACqE,GAAD,EAAMC,QAAN,EAAmB;AACnC,UAAA,MAAI,CAACC,UAAL,CAAgBF,GAAhB,EAAqBC,QAArB;AACD,SAFD;AAGD,OAJD,MAIO;AACL;AACA,aAAKJ,IAAL,CAAUlE,OAAV,CAAkB,UAACqE,GAAD,EAAMC,QAAN,EAAmB;AACnC,UAAA,MAAI,CAACE,UAAL,CAAgBH,GAAhB,EAAqBC,QAArB;AACD,SAFD;AAGD;;AAED,WAAKvB,IAAL,CAAUe,KAAV;AACD,K,CACD;;;;WACA,aAAIO,GAAJ,EAAS;AACP,UAAMlC,GAAG,GAAG,KAAKsC,IAAL,EAAZ;;AAEA,UAAItG,QAAQ,CAACkG,GAAD,CAAZ,EAAmB;AACjB,aAAKE,UAAL,CAAgBF,GAAhB,EAAqBlC,GAArB;AACD,OAFD,MAEO;AACL,aAAKqC,UAAL,CAAgBH,GAAhB,EAAqBlC,GAArB;AACD;AACF,K,CACD;;;;WACA,kBAASA,GAAT,EAAc;AACZ,WAAKgC,OAAL,CAAaO,MAAb,CAAoBvC,GAApB,EAAyB,CAAzB,EADY,CAGZ;;AACA,WAAK,IAAId,CAAC,GAAGc,GAAR,EAAab,GAAG,GAAG,KAAKmD,IAAL,EAAxB,EAAqCpD,CAAC,GAAGC,GAAzC,EAA8CD,CAAC,IAAI,CAAnD,EAAsD;AACpD,aAAK8C,OAAL,CAAa9C,CAAb,EAAgBA,CAAhB,IAAqB,CAArB;AACD;AACF;;;WACD,gCAAuBsD,IAAvB,EAA6BrE,KAA7B,EAAoC;AAClC,aAAOqE,IAAI,CAAC,KAAKP,QAAL,CAAc9D,KAAd,CAAD,CAAX;AACD;;;WACD,gBAAO;AACL,aAAO,KAAK6D,OAAL,CAAavF,MAApB;AACD;;;WACD,oBAAWyF,GAAX,EAAgBC,QAAhB,EAA0B;AACxB,UAAI,CAAC9F,SAAS,CAAC6F,GAAD,CAAV,IAAmB3F,OAAO,CAAC2F,GAAD,CAA9B,EAAqC;AACnC;AACD;;AAED,UAAIO,MAAM,GAAG;AACXC,QAAAA,CAAC,EAAER,GADQ;AAEXhD,QAAAA,CAAC,EAAEiD,QAFQ;AAGXZ,QAAAA,CAAC,EAAE,KAAKX,IAAL,CAAU/B,GAAV,CAAcqD,GAAd;AAHQ,OAAb;AAMA,WAAKF,OAAL,CAAa/D,IAAb,CAAkBwE,MAAlB;AACD;;;WACD,oBAAWP,GAAX,EAAgBC,QAAhB,EAA0B;AAAA;;AACxB,UAAIM,MAAM,GAAG;AAAEvD,QAAAA,CAAC,EAAEiD,QAAL;AAAeQ,QAAAA,CAAC,EAAE;AAAlB,OAAb,CADwB,CAGxB;;AACA,WAAKlF,IAAL,CAAUI,OAAV,CAAkB,UAACb,GAAD,EAAM4F,QAAN,EAAmB;AACnC;AACA,YAAInH,KAAK,GAAG,MAAI,CAAC8E,KAAL,CAAW2B,GAAX,EAAgBlF,GAAG,CAACsB,IAApB,CAAZ;;AAEA,YAAI,CAACjC,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB;AACD;;AAED,YAAID,OAAO,CAACC,KAAD,CAAX,EAAoB;AAAA;AAClB,gBAAIoH,UAAU,GAAG,EAAjB;AACA,gBAAMC,KAAK,GAAG,CAAC;AAAEC,cAAAA,cAAc,EAAE,CAAC,CAAnB;AAAsBtH,cAAAA,KAAK,EAALA;AAAtB,aAAD,CAAd;;AAEA,mBAAOqH,KAAK,CAACrG,MAAb,EAAqB;AAAA,+BACeqG,KAAK,CAACE,GAAN,EADf;AAAA,kBACXD,cADW,cACXA,cADW;AAAA,kBACKtH,MADL,cACKA,KADL;;AAGnB,kBAAI,CAACY,SAAS,CAACZ,MAAD,CAAd,EAAuB;AACrB;AACD;;AAED,kBAAIO,QAAQ,CAACP,MAAD,CAAR,IAAmB,CAACc,OAAO,CAACd,MAAD,CAA/B,EAAwC;AACtC,oBAAIwH,SAAS,GAAG;AACdP,kBAAAA,CAAC,EAAEjH,MADW;AAEdyD,kBAAAA,CAAC,EAAE6D,cAFW;AAGdxB,kBAAAA,CAAC,EAAE,MAAI,CAACX,IAAL,CAAU/B,GAAV,CAAcpD,MAAd;AAHW,iBAAhB;AAMAoH,gBAAAA,UAAU,CAAC5E,IAAX,CAAgBgF,SAAhB;AACD,eARD,MAQO,IAAIzH,OAAO,CAACC,MAAD,CAAX,EAAoB;AACzBA,gBAAAA,MAAK,CAACoC,OAAN,CAAc,UAAC2E,IAAD,EAAOU,CAAP,EAAa;AACzBJ,kBAAAA,KAAK,CAAC7E,IAAN,CAAW;AACT8E,oBAAAA,cAAc,EAAEG,CADP;AAETzH,oBAAAA,KAAK,EAAE+G;AAFE,mBAAX;AAID,iBALD;AAMD;AACF;;AACDC,YAAAA,MAAM,CAACE,CAAP,CAASC,QAAT,IAAqBC,UAArB;AA5BkB;AA6BnB,SA7BD,MA6BO,IAAI,CAACtG,OAAO,CAACd,KAAD,CAAZ,EAAqB;AAC1B,cAAIwH,SAAS,GAAG;AACdP,YAAAA,CAAC,EAAEjH,KADW;AAEd8F,YAAAA,CAAC,EAAE,MAAI,CAACX,IAAL,CAAU/B,GAAV,CAAcpD,KAAd;AAFW,WAAhB;AAKAgH,UAAAA,MAAM,CAACE,CAAP,CAASC,QAAT,IAAqBK,SAArB;AACD;AACF,OA7CD;AA+CA,WAAKjB,OAAL,CAAa/D,IAAb,CAAkBwE,MAAlB;AACD;;;WACD,kBAAS;AACP,aAAO;AACLhF,QAAAA,IAAI,EAAE,KAAKA,IADN;AAELuE,QAAAA,OAAO,EAAE,KAAKA;AAFT,OAAP;AAID;;;;;;AAGH,SAASmB,WAAT,CAAqB1F,IAArB,EAA2BsE,IAA3B,EAAgE;AAAA,kFAAJ,EAAI;AAAA,0BAA7BxB,KAA6B;AAAA,MAA7BA,KAA6B,4BAArBG,MAAM,CAACH,KAAc;;AAC9D,MAAM6C,OAAO,GAAG,IAAIxB,SAAJ,CAAc;AAAErB,IAAAA,KAAK,EAALA;AAAF,GAAd,CAAhB;AACA6C,EAAAA,OAAO,CAACC,OAAR,CAAgB5F,IAAI,CAAC6F,GAAL,CAASvF,SAAT,CAAhB;AACAqF,EAAAA,OAAO,CAACG,UAAR,CAAmBxB,IAAnB;AACAqB,EAAAA,OAAO,CAACI,MAAR;AACA,SAAOJ,OAAP;AACD;;AAED,SAASK,UAAT,CAAoBC,IAApB,EAAyD;AAAA,kFAAJ,EAAI;AAAA,0BAA7BnD,KAA6B;AAAA,MAA7BA,KAA6B,4BAArBG,MAAM,CAACH,KAAc;;AAAA,MAC/C9C,IAD+C,GAC7BiG,IAD6B,CAC/CjG,IAD+C;AAAA,MACzCuE,OADyC,GAC7B0B,IAD6B,CACzC1B,OADyC;AAEvD,MAAMoB,OAAO,GAAG,IAAIxB,SAAJ,CAAc;AAAErB,IAAAA,KAAK,EAALA;AAAF,GAAd,CAAhB;AACA6C,EAAAA,OAAO,CAACC,OAAR,CAAgB5F,IAAhB;AACA2F,EAAAA,OAAO,CAACtB,eAAR,CAAwBE,OAAxB;AACA,SAAOoB,OAAP;AACD;;AAED,SAASO,YAAT,CACEC,OADF,EASE;AAAA,kFADI,EACJ;AAAA,2BANEC,MAMF;AAAA,MANEA,MAMF,6BANW,CAMX;AAAA,oCALEC,eAKF;AAAA,MALEA,eAKF,sCALoB,CAKpB;AAAA,oCAJEC,gBAIF;AAAA,MAJEA,gBAIF,sCAJqB,CAIrB;AAAA,6BAHE3D,QAGF;AAAA,MAHEA,QAGF,+BAHaM,MAAM,CAACN,QAGpB;AAAA,mCAFEI,cAEF;AAAA,MAFEA,cAEF,qCAFmBE,MAAM,CAACF,cAE1B;;AACA,MAAMwD,QAAQ,GAAGH,MAAM,GAAGD,OAAO,CAACnH,MAAlC;;AAEA,MAAI+D,cAAJ,EAAoB;AAClB,WAAOwD,QAAP;AACD;;AAED,MAAMC,SAAS,GAAGhD,IAAI,CAACiD,GAAL,CAASH,gBAAgB,GAAGD,eAA5B,CAAlB;;AAEA,MAAI,CAAC1D,QAAL,EAAe;AACb;AACA,WAAO6D,SAAS,GAAG,GAAH,GAASD,QAAzB;AACD;;AAED,SAAOA,QAAQ,GAAGC,SAAS,GAAG7D,QAA9B;AACD;;AAED,SAAS+D,oBAAT,GAGE;AAAA,MAFAC,SAEA,uEAFY,EAEZ;AAAA,MADA7E,kBACA,uEADqBmB,MAAM,CAACnB,kBAC5B;AACA,MAAI8E,OAAO,GAAG,EAAd;AACA,MAAIC,KAAK,GAAG,CAAC,CAAb;AACA,MAAIC,GAAG,GAAG,CAAC,CAAX;AACA,MAAIrF,CAAC,GAAG,CAAR;;AAEA,OAAK,IAAIC,GAAG,GAAGiF,SAAS,CAAC3H,MAAzB,EAAiCyC,CAAC,GAAGC,GAArC,EAA0CD,CAAC,IAAI,CAA/C,EAAkD;AAChD,QAAIkC,KAAK,GAAGgD,SAAS,CAAClF,CAAD,CAArB;;AACA,QAAIkC,KAAK,IAAIkD,KAAK,KAAK,CAAC,CAAxB,EAA2B;AACzBA,MAAAA,KAAK,GAAGpF,CAAR;AACD,KAFD,MAEO,IAAI,CAACkC,KAAD,IAAUkD,KAAK,KAAK,CAAC,CAAzB,EAA4B;AACjCC,MAAAA,GAAG,GAAGrF,CAAC,GAAG,CAAV;;AACA,UAAIqF,GAAG,GAAGD,KAAN,GAAc,CAAd,IAAmB/E,kBAAvB,EAA2C;AACzC8E,QAAAA,OAAO,CAACpG,IAAR,CAAa,CAACqG,KAAD,EAAQC,GAAR,CAAb;AACD;;AACDD,MAAAA,KAAK,GAAG,CAAC,CAAT;AACD;AACF,GAjBD,CAmBA;;;AACA,MAAIF,SAAS,CAAClF,CAAC,GAAG,CAAL,CAAT,IAAoBA,CAAC,GAAGoF,KAAJ,IAAa/E,kBAArC,EAAyD;AACvD8E,IAAAA,OAAO,CAACpG,IAAR,CAAa,CAACqG,KAAD,EAAQpF,CAAC,GAAG,CAAZ,CAAb;AACD;;AAED,SAAOmF,OAAP;AACD,C,CAED;;;AACA,IAAMG,QAAQ,GAAG,EAAjB;;AAEA,SAASC,MAAT,CACEC,IADF,EAEEd,OAFF,EAGEe,eAHF,EAaE;AAAA,kFADI,EACJ;AAAA,6BAREzE,QAQF;AAAA,MAREA,QAQF,+BARaQ,MAAM,CAACR,QAQpB;AAAA,6BAPEE,QAOF;AAAA,MAPEA,QAOF,+BAPaM,MAAM,CAACN,QAOpB;AAAA,8BANED,SAMF;AAAA,MANEA,SAMF,gCANcO,MAAM,CAACP,SAMrB;AAAA,mCALEb,cAKF;AAAA,MALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;AAAA,oCAJEC,kBAIF;AAAA,MAJEA,kBAIF,sCAJuBmB,MAAM,CAACnB,kBAI9B;AAAA,mCAHEF,cAGF;AAAA,MAHEA,cAGF,qCAHmBqB,MAAM,CAACrB,cAG1B;AAAA,mCAFEmB,cAEF;AAAA,MAFEA,cAEF,qCAFmBE,MAAM,CAACF,cAE1B;;AACA,MAAIoD,OAAO,CAACnH,MAAR,GAAiB+H,QAArB,EAA+B;AAC7B,UAAM,IAAI9F,KAAJ,CAAUzB,wBAAwB,CAACuH,QAAD,CAAlC,CAAN;AACD;;AAED,MAAMI,UAAU,GAAGhB,OAAO,CAACnH,MAA3B,CALA,CAMA;;AACA,MAAMoI,OAAO,GAAGH,IAAI,CAACjI,MAArB,CAPA,CAQA;;AACA,MAAMsH,gBAAgB,GAAG9C,IAAI,CAAC/D,GAAL,CAAS,CAAT,EAAY+D,IAAI,CAAC6D,GAAL,CAAS5E,QAAT,EAAmB2E,OAAnB,CAAZ,CAAzB,CATA,CAUA;;AACA,MAAIE,gBAAgB,GAAG5E,SAAvB,CAXA,CAYA;;AACA,MAAI6E,YAAY,GAAGjB,gBAAnB,CAbA,CAeA;AACA;;AACA,MAAMkB,cAAc,GAAG1F,kBAAkB,GAAG,CAArB,IAA0BF,cAAjD,CAjBA,CAkBA;;AACA,MAAM6F,SAAS,GAAGD,cAAc,GAAGvJ,KAAK,CAACmJ,OAAD,CAAR,GAAoB,EAApD;AAEA,MAAI5F,KAAJ,CArBA,CAuBA;;AACA,SAAO,CAACA,KAAK,GAAGyF,IAAI,CAACS,OAAL,CAAavB,OAAb,EAAsBoB,YAAtB,CAAT,IAAgD,CAAC,CAAxD,EAA2D;AACzD,QAAIjF,KAAK,GAAG4D,YAAY,CAACC,OAAD,EAAU;AAChCE,MAAAA,eAAe,EAAE7E,KADe;AAEhC8E,MAAAA,gBAAgB,EAAhBA,gBAFgC;AAGhC3D,MAAAA,QAAQ,EAARA,QAHgC;AAIhCI,MAAAA,cAAc,EAAdA;AAJgC,KAAV,CAAxB;AAOAuE,IAAAA,gBAAgB,GAAG9D,IAAI,CAAC6D,GAAL,CAAS/E,KAAT,EAAgBgF,gBAAhB,CAAnB;AACAC,IAAAA,YAAY,GAAG/F,KAAK,GAAG2F,UAAvB;;AAEA,QAAIK,cAAJ,EAAoB;AAClB,UAAI/F,CAAC,GAAG,CAAR;;AACA,aAAOA,CAAC,GAAG0F,UAAX,EAAuB;AACrBM,QAAAA,SAAS,CAACjG,KAAK,GAAGC,CAAT,CAAT,GAAuB,CAAvB;AACAA,QAAAA,CAAC,IAAI,CAAL;AACD;AACF;AACF,GA1CD,CA4CA;;;AACA8F,EAAAA,YAAY,GAAG,CAAC,CAAhB;AAEA,MAAII,UAAU,GAAG,EAAjB;AACA,MAAIC,UAAU,GAAG,CAAjB;AACA,MAAIC,MAAM,GAAGV,UAAU,GAAGC,OAA1B;AAEA,MAAMU,IAAI,GAAG,KAAMX,UAAU,GAAG,CAAhC;;AAEA,OAAK,IAAI1F,EAAC,GAAG,CAAb,EAAgBA,EAAC,GAAG0F,UAApB,EAAgC1F,EAAC,IAAI,CAArC,EAAwC;AACtC;AACA;AACA;AACA,QAAIsG,MAAM,GAAG,CAAb;AACA,QAAIC,MAAM,GAAGH,MAAb;;AAEA,WAAOE,MAAM,GAAGC,MAAhB,EAAwB;AACtB,UAAM1F,OAAK,GAAG4D,YAAY,CAACC,OAAD,EAAU;AAClCC,QAAAA,MAAM,EAAE3E,EAD0B;AAElC4E,QAAAA,eAAe,EAAEC,gBAAgB,GAAG0B,MAFF;AAGlC1B,QAAAA,gBAAgB,EAAhBA,gBAHkC;AAIlC3D,QAAAA,QAAQ,EAARA,QAJkC;AAKlCI,QAAAA,cAAc,EAAdA;AALkC,OAAV,CAA1B;;AAQA,UAAIT,OAAK,IAAIgF,gBAAb,EAA+B;AAC7BS,QAAAA,MAAM,GAAGC,MAAT;AACD,OAFD,MAEO;AACLH,QAAAA,MAAM,GAAGG,MAAT;AACD;;AAEDA,MAAAA,MAAM,GAAGxE,IAAI,CAACyE,KAAL,CAAW,CAACJ,MAAM,GAAGE,MAAV,IAAoB,CAApB,GAAwBA,MAAnC,CAAT;AACD,KAvBqC,CAyBtC;;;AACAF,IAAAA,MAAM,GAAGG,MAAT;AAEA,QAAInB,KAAK,GAAGrD,IAAI,CAAC/D,GAAL,CAAS,CAAT,EAAY6G,gBAAgB,GAAG0B,MAAnB,GAA4B,CAAxC,CAAZ;AACA,QAAIE,MAAM,GAAGrG,cAAc,GACvBuF,OADuB,GAEvB5D,IAAI,CAAC6D,GAAL,CAASf,gBAAgB,GAAG0B,MAA5B,EAAoCZ,OAApC,IAA+CD,UAFnD,CA7BsC,CAiCtC;;AACA,QAAIgB,MAAM,GAAGlK,KAAK,CAACiK,MAAM,GAAG,CAAV,CAAlB;AAEAC,IAAAA,MAAM,CAACD,MAAM,GAAG,CAAV,CAAN,GAAqB,CAAC,KAAKzG,EAAN,IAAW,CAAhC;;AAEA,SAAK,IAAI2G,CAAC,GAAGF,MAAb,EAAqBE,CAAC,IAAIvB,KAA1B,EAAiCuB,CAAC,IAAI,CAAtC,EAAyC;AACvC,UAAI/B,eAAe,GAAG+B,CAAC,GAAG,CAA1B;AACA,UAAIC,SAAS,GAAGnB,eAAe,CAACD,IAAI,CAACqB,MAAL,CAAYjC,eAAZ,CAAD,CAA/B;;AAEA,UAAImB,cAAJ,EAAoB;AAClB;AACAC,QAAAA,SAAS,CAACpB,eAAD,CAAT,GAA6B,CAAC,CAAC,CAACgC,SAAhC;AACD,OAPsC,CASvC;;;AACAF,MAAAA,MAAM,CAACC,CAAD,CAAN,GAAY,CAAED,MAAM,CAACC,CAAC,GAAG,CAAL,CAAN,IAAiB,CAAlB,GAAuB,CAAxB,IAA6BC,SAAzC,CAVuC,CAYvC;;AACA,UAAI5G,EAAJ,EAAO;AACL0G,QAAAA,MAAM,CAACC,CAAD,CAAN,IACG,CAACT,UAAU,CAACS,CAAC,GAAG,CAAL,CAAV,GAAoBT,UAAU,CAACS,CAAD,CAA/B,KAAuC,CAAxC,GAA6C,CAA7C,GAAiDT,UAAU,CAACS,CAAC,GAAG,CAAL,CAD7D;AAED;;AAED,UAAID,MAAM,CAACC,CAAD,CAAN,GAAYN,IAAhB,EAAsB;AACpBF,QAAAA,UAAU,GAAG1B,YAAY,CAACC,OAAD,EAAU;AACjCC,UAAAA,MAAM,EAAE3E,EADyB;AAEjC4E,UAAAA,eAAe,EAAfA,eAFiC;AAGjCC,UAAAA,gBAAgB,EAAhBA,gBAHiC;AAIjC3D,UAAAA,QAAQ,EAARA,QAJiC;AAKjCI,UAAAA,cAAc,EAAdA;AALiC,SAAV,CAAzB,CADoB,CASpB;AACA;;AACA,YAAI6E,UAAU,IAAIN,gBAAlB,EAAoC;AAClC;AACAA,UAAAA,gBAAgB,GAAGM,UAAnB;AACAL,UAAAA,YAAY,GAAGlB,eAAf,CAHkC,CAKlC;;AACA,cAAIkB,YAAY,IAAIjB,gBAApB,EAAsC;AACpC;AACD,WARiC,CAUlC;;;AACAO,UAAAA,KAAK,GAAGrD,IAAI,CAAC/D,GAAL,CAAS,CAAT,EAAY,IAAI6G,gBAAJ,GAAuBiB,YAAnC,CAAR;AACD;AACF;AACF,KAjFqC,CAmFtC;;;AACA,QAAMjF,MAAK,GAAG4D,YAAY,CAACC,OAAD,EAAU;AAClCC,MAAAA,MAAM,EAAE3E,EAAC,GAAG,CADsB;AAElC4E,MAAAA,eAAe,EAAEC,gBAFiB;AAGlCA,MAAAA,gBAAgB,EAAhBA,gBAHkC;AAIlC3D,MAAAA,QAAQ,EAARA,QAJkC;AAKlCI,MAAAA,cAAc,EAAdA;AALkC,KAAV,CAA1B;;AAQA,QAAIT,MAAK,GAAGgF,gBAAZ,EAA8B;AAC5B;AACD;;AAEDK,IAAAA,UAAU,GAAGQ,MAAb;AACD;;AAED,MAAM9J,MAAM,GAAG;AACbkK,IAAAA,OAAO,EAAEhB,YAAY,IAAI,CADZ;AAEb;AACAjF,IAAAA,KAAK,EAAEkB,IAAI,CAAC/D,GAAL,CAAS,KAAT,EAAgBmI,UAAhB;AAHM,GAAf;;AAMA,MAAIJ,cAAJ,EAAoB;AAClB,QAAMZ,OAAO,GAAGF,oBAAoB,CAACe,SAAD,EAAY3F,kBAAZ,CAApC;;AACA,QAAI,CAAC8E,OAAO,CAAC5H,MAAb,EAAqB;AACnBX,MAAAA,MAAM,CAACkK,OAAP,GAAiB,KAAjB;AACD,KAFD,MAEO,IAAI3G,cAAJ,EAAoB;AACzBvD,MAAAA,MAAM,CAACuI,OAAP,GAAiBA,OAAjB;AACD;AACF;;AAED,SAAOvI,MAAP;AACD;;AAED,SAASmK,qBAAT,CAA+BrC,OAA/B,EAAwC;AACtC,MAAI2B,IAAI,GAAG,EAAX;;AAEA,OAAK,IAAIrG,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGyE,OAAO,CAACnH,MAA9B,EAAsCyC,CAAC,GAAGC,GAA1C,EAA+CD,CAAC,IAAI,CAApD,EAAuD;AACrD,QAAMgH,IAAI,GAAGtC,OAAO,CAACmC,MAAR,CAAe7G,CAAf,CAAb;AACAqG,IAAAA,IAAI,CAACW,IAAD,CAAJ,GAAa,CAACX,IAAI,CAACW,IAAD,CAAJ,IAAc,CAAf,IAAqB,KAAM/G,GAAG,GAAGD,CAAN,GAAU,CAAlD;AACD;;AAED,SAAOqG,IAAP;AACD;;IAEKY,W;AACJ,uBACEvC,OADF,EAYE;AAAA;;AAAA,oFADI,EACJ;AAAA,+BATE1D,QASF;AAAA,QATEA,QASF,+BATaQ,MAAM,CAACR,QASpB;AAAA,gCAREC,SAQF;AAAA,QAREA,SAQF,gCARcO,MAAM,CAACP,SAQrB;AAAA,+BAPEC,QAOF;AAAA,QAPEA,QAOF,+BAPaM,MAAM,CAACN,QAOpB;AAAA,qCANEf,cAMF;AAAA,QANEA,cAMF,qCANmBqB,MAAM,CAACrB,cAM1B;AAAA,qCALEC,cAKF;AAAA,QALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;AAAA,sCAJEC,kBAIF;AAAA,QAJEA,kBAIF,sCAJuBmB,MAAM,CAACnB,kBAI9B;AAAA,sCAHEE,eAGF;AAAA,QAHEA,eAGF,sCAHoBiB,MAAM,CAACjB,eAG3B;AAAA,qCAFEe,cAEF;AAAA,QAFEA,cAEF,qCAFmBE,MAAM,CAACF,cAE1B;;AAAA;;AACA,SAAK4F,OAAL,GAAe;AACblG,MAAAA,QAAQ,EAARA,QADa;AAEbC,MAAAA,SAAS,EAATA,SAFa;AAGbC,MAAAA,QAAQ,EAARA,QAHa;AAIbf,MAAAA,cAAc,EAAdA,cAJa;AAKbC,MAAAA,cAAc,EAAdA,cALa;AAMbC,MAAAA,kBAAkB,EAAlBA,kBANa;AAObE,MAAAA,eAAe,EAAfA,eAPa;AAQbe,MAAAA,cAAc,EAAdA;AARa,KAAf;AAWA,SAAKoD,OAAL,GAAenE,eAAe,GAAGmE,OAAH,GAAaA,OAAO,CAACyC,WAAR,EAA3C;AAEA,SAAKC,MAAL,GAAc,EAAd;;AAEA,QAAI,CAAC,KAAK1C,OAAL,CAAanH,MAAlB,EAA0B;AACxB;AACD;;AAED,QAAM8J,QAAQ,GAAG,SAAXA,QAAW,CAAC3C,OAAD,EAAU4C,UAAV,EAAyB;AACxC,MAAA,MAAI,CAACF,MAAL,CAAYrI,IAAZ,CAAiB;AACf2F,QAAAA,OAAO,EAAPA,OADe;AAEf6C,QAAAA,QAAQ,EAAER,qBAAqB,CAACrC,OAAD,CAFhB;AAGf4C,QAAAA,UAAU,EAAVA;AAHe,OAAjB;AAKD,KAND;;AAQA,QAAMrH,GAAG,GAAG,KAAKyE,OAAL,CAAanH,MAAzB;;AAEA,QAAI0C,GAAG,GAAGqF,QAAV,EAAoB;AAClB,UAAItF,CAAC,GAAG,CAAR;AACA,UAAMwH,SAAS,GAAGvH,GAAG,GAAGqF,QAAxB;AACA,UAAMD,GAAG,GAAGpF,GAAG,GAAGuH,SAAlB;;AAEA,aAAOxH,CAAC,GAAGqF,GAAX,EAAgB;AACdgC,QAAAA,QAAQ,CAAC,KAAK3C,OAAL,CAAa+C,MAAb,CAAoBzH,CAApB,EAAuBsF,QAAvB,CAAD,EAAmCtF,CAAnC,CAAR;AACAA,QAAAA,CAAC,IAAIsF,QAAL;AACD;;AAED,UAAIkC,SAAJ,EAAe;AACb,YAAMF,UAAU,GAAGrH,GAAG,GAAGqF,QAAzB;AACA+B,QAAAA,QAAQ,CAAC,KAAK3C,OAAL,CAAa+C,MAAb,CAAoBH,UAApB,CAAD,EAAkCA,UAAlC,CAAR;AACD;AACF,KAdD,MAcO;AACLD,MAAAA,QAAQ,CAAC,KAAK3C,OAAN,EAAe,CAAf,CAAR;AACD;AACF;;;;WAED,kBAASc,IAAT,EAAe;AAAA,0BAC+B,KAAK0B,OADpC;AAAA,UACL3G,eADK,iBACLA,eADK;AAAA,UACYJ,cADZ,iBACYA,cADZ;;AAGb,UAAI,CAACI,eAAL,EAAsB;AACpBiF,QAAAA,IAAI,GAAGA,IAAI,CAAC2B,WAAL,EAAP;AACD,OALY,CAOb;;;AACA,UAAI,KAAKzC,OAAL,KAAiBc,IAArB,EAA2B;AACzB,YAAI5I,OAAM,GAAG;AACXkK,UAAAA,OAAO,EAAE,IADE;AAEXjG,UAAAA,KAAK,EAAE;AAFI,SAAb;;AAKA,YAAIV,cAAJ,EAAoB;AAClBvD,UAAAA,OAAM,CAACuI,OAAP,GAAiB,CAAC,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB,CAAD,CAAjB;AACD;;AAED,eAAOX,OAAP;AACD,OAnBY,CAqBb;;;AArBa,2BA6BT,KAAKsK,OA7BI;AAAA,UAuBXlG,QAvBW,kBAuBXA,QAvBW;AAAA,UAwBXE,QAxBW,kBAwBXA,QAxBW;AAAA,UAyBXD,SAzBW,kBAyBXA,SAzBW;AAAA,UA0BXb,cA1BW,kBA0BXA,cA1BW;AAAA,UA2BXC,kBA3BW,kBA2BXA,kBA3BW;AAAA,UA4BXiB,cA5BW,kBA4BXA,cA5BW;AA+Bb,UAAIoG,UAAU,GAAG,EAAjB;AACA,UAAIC,UAAU,GAAG,CAAjB;AACA,UAAIC,UAAU,GAAG,KAAjB;AAEA,WAAKR,MAAL,CAAYzI,OAAZ,CAAoB,iBAAuC;AAAA,YAApC+F,OAAoC,SAApCA,OAAoC;AAAA,YAA3B6C,QAA2B,SAA3BA,QAA2B;AAAA,YAAjBD,UAAiB,SAAjBA,UAAiB;;AAAA,sBACrB/B,MAAM,CAACC,IAAD,EAAOd,OAAP,EAAgB6C,QAAhB,EAA0B;AAClEvG,UAAAA,QAAQ,EAAEA,QAAQ,GAAGsG,UAD6C;AAElEpG,UAAAA,QAAQ,EAARA,QAFkE;AAGlED,UAAAA,SAAS,EAATA,SAHkE;AAIlEb,UAAAA,cAAc,EAAdA,cAJkE;AAKlEC,UAAAA,kBAAkB,EAAlBA,kBALkE;AAMlEF,UAAAA,cAAc,EAAdA,cANkE;AAOlEmB,UAAAA,cAAc,EAAdA;AAPkE,SAA1B,CADe;AAAA,YACjDwF,OADiD,WACjDA,OADiD;AAAA,YACxCjG,KADwC,WACxCA,KADwC;AAAA,YACjCsE,OADiC,WACjCA,OADiC;;AAWzD,YAAI2B,OAAJ,EAAa;AACXc,UAAAA,UAAU,GAAG,IAAb;AACD;;AAEDD,QAAAA,UAAU,IAAI9G,KAAd;;AAEA,YAAIiG,OAAO,IAAI3B,OAAf,EAAwB;AACtBuC,UAAAA,UAAU,gCAAOA,UAAP,sBAAsBvC,OAAtB,EAAV;AACD;AACF,OApBD;AAsBA,UAAIvI,MAAM,GAAG;AACXkK,QAAAA,OAAO,EAAEc,UADE;AAEX/G,QAAAA,KAAK,EAAE+G,UAAU,GAAGD,UAAU,GAAG,KAAKP,MAAL,CAAY7J,MAA5B,GAAqC;AAF3C,OAAb;;AAKA,UAAIqK,UAAU,IAAIzH,cAAlB,EAAkC;AAChCvD,QAAAA,MAAM,CAACuI,OAAP,GAAiBuC,UAAjB;AACD;;AAED,aAAO9K,MAAP;AACD;;;;;;IAGGiL,S;AACJ,qBAAYnD,OAAZ,EAAqB;AAAA;;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;;;WAOD;AAAO;AAAU,KAAE;;;WANnB,sBAAoBA,OAApB,EAA6B;AAC3B,aAAOoD,QAAQ,CAACpD,OAAD,EAAU,KAAKqD,UAAf,CAAf;AACD;;;WACD,uBAAqBrD,OAArB,EAA8B;AAC5B,aAAOoD,QAAQ,CAACpD,OAAD,EAAU,KAAKsD,WAAf,CAAf;AACD;;;;;;AAIH,SAASF,QAAT,CAAkBpD,OAAlB,EAA2BuD,GAA3B,EAAgC;AAC9B,MAAMC,OAAO,GAAGxD,OAAO,CAACxC,KAAR,CAAc+F,GAAd,CAAhB;AACA,SAAOC,OAAO,GAAGA,OAAO,CAAC,CAAD,CAAV,GAAgB,IAA9B;AACD,C,CAED;;;IAEMC,U;;;;;AACJ,sBAAYzD,OAAZ,EAAqB;AAAA;;AAAA,6BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAMsB,OAAO,GAAGtB,IAAI,KAAK,KAAKd,OAA9B;AAEA,aAAO;AACLoC,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,KAAKT,OAAL,CAAanH,MAAb,GAAsB,CAA1B;AAHJ,OAAP;AAKD;;;SAjBD,eAAkB;AAChB,aAAO,OAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,WAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,SAAP;AACD;;;;EAZsBsK,S,GAwBzB;;;IAEMO,iB;;;;;AACJ,6BAAY1D,OAAZ,EAAqB;AAAA;;AAAA,8BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAMzF,KAAK,GAAGyF,IAAI,CAACS,OAAL,CAAa,KAAKvB,OAAlB,CAAd;AACA,UAAMoC,OAAO,GAAG/G,KAAK,KAAK,CAAC,CAA3B;AAEA,aAAO;AACL+G,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB;AAHJ,OAAP;AAKD;;;SAlBD,eAAkB;AAChB,aAAO,eAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,WAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,SAAP;AACD;;;;EAZ6BsK,S,GAyBhC;;;IAEMQ,gB;;;;;AACJ,4BAAY3D,OAAZ,EAAqB;AAAA;;AAAA,8BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAMsB,OAAO,GAAGtB,IAAI,CAAC8C,UAAL,CAAgB,KAAK5D,OAArB,CAAhB;AAEA,aAAO;AACLoC,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAE,CAAC,CAAD,EAAI,KAAKT,OAAL,CAAanH,MAAb,GAAsB,CAA1B;AAHJ,OAAP;AAKD;;;SAjBD,eAAkB;AAChB,aAAO,cAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,YAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,UAAP;AACD;;;;EAZ4BsK,S,GAwB/B;;;IAEMU,uB;;;;;AACJ,mCAAY7D,OAAZ,EAAqB;AAAA;;AAAA,8BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAMsB,OAAO,GAAG,CAACtB,IAAI,CAAC8C,UAAL,CAAgB,KAAK5D,OAArB,CAAjB;AAEA,aAAO;AACLoC,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB;AAHJ,OAAP;AAKD;;;SAjBD,eAAkB;AAChB,aAAO,sBAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,aAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,WAAP;AACD;;;;EAZmCsK,S,GAwBtC;;;IAEMW,gB;;;;;AACJ,4BAAY9D,OAAZ,EAAqB;AAAA;;AAAA,8BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAMsB,OAAO,GAAGtB,IAAI,CAACiD,QAAL,CAAc,KAAK/D,OAAnB,CAAhB;AAEA,aAAO;AACLoC,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAE,CAACK,IAAI,CAACjI,MAAL,GAAc,KAAKmH,OAAL,CAAanH,MAA5B,EAAoCiI,IAAI,CAACjI,MAAL,GAAc,CAAlD;AAHJ,OAAP;AAKD;;;SAjBD,eAAkB;AAChB,aAAO,cAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,YAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,UAAP;AACD;;;;EAZ4BsK,S,GAwB/B;;;IAEMa,uB;;;;;AACJ,mCAAYhE,OAAZ,EAAqB;AAAA;;AAAA,8BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAMsB,OAAO,GAAG,CAACtB,IAAI,CAACiD,QAAL,CAAc,KAAK/D,OAAnB,CAAjB;AACA,aAAO;AACLoC,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAE,CAAC,CAAD,EAAIK,IAAI,CAACjI,MAAL,GAAc,CAAlB;AAHJ,OAAP;AAKD;;;SAhBD,eAAkB;AAChB,aAAO,sBAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,aAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,WAAP;AACD;;;;EAZmCsK,S;;IAuBhCc,U;;;;;AACJ,sBACEjE,OADF,EAYE;AAAA;;AAAA,oFADI,EACJ;AAAA,+BATE1D,QASF;AAAA,QATEA,QASF,+BATaQ,MAAM,CAACR,QASpB;AAAA,gCAREC,SAQF;AAAA,QAREA,SAQF,gCARcO,MAAM,CAACP,SAQrB;AAAA,+BAPEC,QAOF;AAAA,QAPEA,QAOF,+BAPaM,MAAM,CAACN,QAOpB;AAAA,qCANEf,cAMF;AAAA,QANEA,cAMF,qCANmBqB,MAAM,CAACrB,cAM1B;AAAA,qCALEC,cAKF;AAAA,QALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;AAAA,sCAJEC,kBAIF;AAAA,QAJEA,kBAIF,sCAJuBmB,MAAM,CAACnB,kBAI9B;AAAA,sCAHEE,eAGF;AAAA,QAHEA,eAGF,sCAHoBiB,MAAM,CAACjB,eAG3B;AAAA,qCAFEe,cAEF;AAAA,QAFEA,cAEF,qCAFmBE,MAAM,CAACF,cAE1B;;AAAA;;AACA,gCAAMoD,OAAN;AACA,WAAKkE,YAAL,GAAoB,IAAI3B,WAAJ,CAAgBvC,OAAhB,EAAyB;AAC3C1D,MAAAA,QAAQ,EAARA,QAD2C;AAE3CC,MAAAA,SAAS,EAATA,SAF2C;AAG3CC,MAAAA,QAAQ,EAARA,QAH2C;AAI3Cf,MAAAA,cAAc,EAAdA,cAJ2C;AAK3CC,MAAAA,cAAc,EAAdA,cAL2C;AAM3CC,MAAAA,kBAAkB,EAAlBA,kBAN2C;AAO3CE,MAAAA,eAAe,EAAfA,eAP2C;AAQ3Ce,MAAAA,cAAc,EAAdA;AAR2C,KAAzB,CAApB;AAFA;AAYD;;;;WAUD,gBAAOkE,IAAP,EAAa;AACX,aAAO,KAAKoD,YAAL,CAAkBC,QAAlB,CAA2BrD,IAA3B,CAAP;AACD;;;SAXD,eAAkB;AAChB,aAAO,OAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,UAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,QAAP;AACD;;;;EAlCsBqC,S,GAwCzB;;;IAEMiB,Y;;;;;AACJ,wBAAYpE,OAAZ,EAAqB;AAAA;;AAAA,8BACbA,OADa;AAEpB;;;;WAUD,gBAAOc,IAAP,EAAa;AACX,UAAIxE,QAAQ,GAAG,CAAf;AACA,UAAIjB,KAAJ;AAEA,UAAMoF,OAAO,GAAG,EAAhB;AACA,UAAMO,UAAU,GAAG,KAAKhB,OAAL,CAAanH,MAAhC,CALW,CAOX;;AACA,aAAO,CAACwC,KAAK,GAAGyF,IAAI,CAACS,OAAL,CAAa,KAAKvB,OAAlB,EAA2B1D,QAA3B,CAAT,IAAiD,CAAC,CAAzD,EAA4D;AAC1DA,QAAAA,QAAQ,GAAGjB,KAAK,GAAG2F,UAAnB;AACAP,QAAAA,OAAO,CAACpG,IAAR,CAAa,CAACgB,KAAD,EAAQiB,QAAQ,GAAG,CAAnB,CAAb;AACD;;AAED,UAAM8F,OAAO,GAAG,CAAC,CAAC3B,OAAO,CAAC5H,MAA1B;AAEA,aAAO;AACLuJ,QAAAA,OAAO,EAAPA,OADK;AAELjG,QAAAA,KAAK,EAAEiG,OAAO,GAAG,CAAH,GAAO,CAFhB;AAGL3B,QAAAA,OAAO,EAAPA;AAHK,OAAP;AAKD;;;SA7BD,eAAkB;AAChB,aAAO,SAAP;AACD;;;SACD,eAAwB;AACtB,aAAO,WAAP;AACD;;;SACD,eAAyB;AACvB,aAAO,SAAP;AACD;;;;EAZwB0C,S,GAoC3B;;;AACA,IAAMkB,SAAS,GAAG,CAChBZ,UADgB,EAEhBW,YAFgB,EAGhBT,gBAHgB,EAIhBE,uBAJgB,EAKhBG,uBALgB,EAMhBF,gBANgB,EAOhBJ,iBAPgB,EAQhBO,UARgB,CAAlB;AAWA,IAAMK,YAAY,GAAGD,SAAS,CAACxL,MAA/B,C,CAEA;;AACA,IAAM0L,QAAQ,GAAG,kCAAjB;AACA,IAAMC,QAAQ,GAAG,GAAjB,C,CAEA;AACA;AACA;;AACA,SAASC,UAAT,CAAoBzE,OAApB,EAA2C;AAAA,MAAdwC,OAAc,uEAAJ,EAAI;AACzC,SAAOxC,OAAO,CAACjF,KAAR,CAAcyJ,QAAd,EAAwB9E,GAAxB,CAA4B,UAACd,IAAD,EAAU;AAC3C,QAAI8F,KAAK,GAAG9F,IAAI,CACbhG,IADS,GAETmC,KAFS,CAEHwJ,QAFG,EAGTI,MAHS,CAGF,UAAC/F,IAAD;AAAA,aAAUA,IAAI,IAAI,CAAC,CAACA,IAAI,CAAChG,IAAL,EAApB;AAAA,KAHE,CAAZ;AAKA,QAAIgM,OAAO,GAAG,EAAd;;AACA,SAAK,IAAItJ,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGmJ,KAAK,CAAC7L,MAA5B,EAAoCyC,CAAC,GAAGC,GAAxC,EAA6CD,CAAC,IAAI,CAAlD,EAAqD;AACnD,UAAMuJ,SAAS,GAAGH,KAAK,CAACpJ,CAAD,CAAvB,CADmD,CAGnD;;AACA,UAAIwJ,KAAK,GAAG,KAAZ;AACA,UAAI1I,GAAG,GAAG,CAAC,CAAX;;AACA,aAAO,CAAC0I,KAAD,IAAU,EAAE1I,GAAF,GAAQkI,YAAzB,EAAuC;AACrC,YAAMS,QAAQ,GAAGV,SAAS,CAACjI,GAAD,CAA1B;AACA,YAAI4I,KAAK,GAAGD,QAAQ,CAACE,YAAT,CAAsBJ,SAAtB,CAAZ;;AACA,YAAIG,KAAJ,EAAW;AACTJ,UAAAA,OAAO,CAACvK,IAAR,CAAa,IAAI0K,QAAJ,CAAaC,KAAb,EAAoBxC,OAApB,CAAb;AACAsC,UAAAA,KAAK,GAAG,IAAR;AACD;AACF;;AAED,UAAIA,KAAJ,EAAW;AACT;AACD,OAjBkD,CAmBnD;;;AACA1I,MAAAA,GAAG,GAAG,CAAC,CAAP;;AACA,aAAO,EAAEA,GAAF,GAAQkI,YAAf,EAA6B;AAC3B,YAAMS,SAAQ,GAAGV,SAAS,CAACjI,GAAD,CAA1B;;AACA,YAAI4I,MAAK,GAAGD,SAAQ,CAACG,aAAT,CAAuBL,SAAvB,CAAZ;;AACA,YAAIG,MAAJ,EAAW;AACTJ,UAAAA,OAAO,CAACvK,IAAR,CAAa,IAAI0K,SAAJ,CAAaC,MAAb,EAAoBxC,OAApB,CAAb;AACA;AACD;AACF;AACF;;AAED,WAAOoC,OAAP;AACD,GAvCM,CAAP;AAwCD,C,CAED;AACA;;;AACA,IAAMO,aAAa,GAAG,IAAIC,GAAJ,CAAQ,CAACnB,UAAU,CAACoB,IAAZ,EAAkBjB,YAAY,CAACiB,IAA/B,CAAR,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IACMC,c;AACJ,0BACEtF,OADF,EAYE;AAAA,oFADI,EACJ;AAAA,sCATEnE,eASF;AAAA,QATEA,eASF,sCAToBiB,MAAM,CAACjB,eAS3B;AAAA,qCAREJ,cAQF;AAAA,QAREA,cAQF,qCARmBqB,MAAM,CAACrB,cAQ1B;AAAA,sCAPEE,kBAOF;AAAA,QAPEA,kBAOF,sCAPuBmB,MAAM,CAACnB,kBAO9B;AAAA,qCANEiB,cAMF;AAAA,QANEA,cAMF,qCANmBE,MAAM,CAACF,cAM1B;AAAA,qCALElB,cAKF;AAAA,QALEA,cAKF,qCALmBoB,MAAM,CAACpB,cAK1B;AAAA,+BAJEY,QAIF;AAAA,QAJEA,QAIF,+BAJaQ,MAAM,CAACR,QAIpB;AAAA,gCAHEC,SAGF;AAAA,QAHEA,SAGF,gCAHcO,MAAM,CAACP,SAGrB;AAAA,+BAFEC,QAEF;AAAA,QAFEA,QAEF,+BAFaM,MAAM,CAACN,QAEpB;;AAAA;;AACA,SAAKkI,KAAL,GAAa,IAAb;AACA,SAAKlC,OAAL,GAAe;AACb3G,MAAAA,eAAe,EAAfA,eADa;AAEbJ,MAAAA,cAAc,EAAdA,cAFa;AAGbE,MAAAA,kBAAkB,EAAlBA,kBAHa;AAIbD,MAAAA,cAAc,EAAdA,cAJa;AAKbkB,MAAAA,cAAc,EAAdA,cALa;AAMbN,MAAAA,QAAQ,EAARA,QANa;AAObC,MAAAA,SAAS,EAATA,SAPa;AAQbC,MAAAA,QAAQ,EAARA;AARa,KAAf;AAWA,SAAKwD,OAAL,GAAenE,eAAe,GAAGmE,OAAH,GAAaA,OAAO,CAACyC,WAAR,EAA3C;AACA,SAAKiC,KAAL,GAAaD,UAAU,CAAC,KAAKzE,OAAN,EAAe,KAAKwC,OAApB,CAAvB;AACD;;;;WAMD,kBAAS1B,IAAT,EAAe;AACb,UAAM4D,KAAK,GAAG,KAAKA,KAAnB;;AAEA,UAAI,CAACA,KAAL,EAAY;AACV,eAAO;AACLtC,UAAAA,OAAO,EAAE,KADJ;AAELjG,UAAAA,KAAK,EAAE;AAFF,SAAP;AAID;;AARY,2BAU+B,KAAKqG,OAVpC;AAAA,UAUL/G,cAVK,kBAULA,cAVK;AAAA,UAUWI,eAVX,kBAUWA,eAVX;AAYbiF,MAAAA,IAAI,GAAGjF,eAAe,GAAGiF,IAAH,GAAUA,IAAI,CAAC2B,WAAL,EAAhC;AAEA,UAAI8C,UAAU,GAAG,CAAjB;AACA,UAAIvC,UAAU,GAAG,EAAjB;AACA,UAAIC,UAAU,GAAG,CAAjB,CAhBa,CAkBb;;AACA,WAAK,IAAI3H,CAAC,GAAG,CAAR,EAAWkK,IAAI,GAAGd,KAAK,CAAC7L,MAA7B,EAAqCyC,CAAC,GAAGkK,IAAzC,EAA+ClK,CAAC,IAAI,CAApD,EAAuD;AACrD,YAAM+I,UAAS,GAAGK,KAAK,CAACpJ,CAAD,CAAvB,CADqD,CAGrD;;AACA0H,QAAAA,UAAU,CAACnK,MAAX,GAAoB,CAApB;AACA0M,QAAAA,UAAU,GAAG,CAAb,CALqD,CAOrD;;AACA,aAAK,IAAItD,CAAC,GAAG,CAAR,EAAWwD,IAAI,GAAGpB,UAAS,CAACxL,MAAjC,EAAyCoJ,CAAC,GAAGwD,IAA7C,EAAmDxD,CAAC,IAAI,CAAxD,EAA2D;AACzD,cAAM8C,QAAQ,GAAGV,UAAS,CAACpC,CAAD,CAA1B;;AADyD,iCAErB8C,QAAQ,CAAClE,MAAT,CAAgBC,IAAhB,CAFqB;AAAA,cAEjDsB,OAFiD,oBAEjDA,OAFiD;AAAA,cAExC3B,OAFwC,oBAExCA,OAFwC;AAAA,cAE/BtE,KAF+B,oBAE/BA,KAF+B;;AAIzD,cAAIiG,OAAJ,EAAa;AACXmD,YAAAA,UAAU,IAAI,CAAd;AACAtC,YAAAA,UAAU,IAAI9G,KAAd;;AACA,gBAAIV,cAAJ,EAAoB;AAClB,kBAAM4J,IAAI,GAAGN,QAAQ,CAACW,WAAT,CAAqBL,IAAlC;;AACA,kBAAIF,aAAa,CAAC1H,GAAd,CAAkB4H,IAAlB,CAAJ,EAA6B;AAC3BrC,gBAAAA,UAAU,gCAAOA,UAAP,sBAAsBvC,OAAtB,EAAV;AACD,eAFD,MAEO;AACLuC,gBAAAA,UAAU,CAAC3I,IAAX,CAAgBoG,OAAhB;AACD;AACF;AACF,WAXD,MAWO;AACLwC,YAAAA,UAAU,GAAG,CAAb;AACAsC,YAAAA,UAAU,GAAG,CAAb;AACAvC,YAAAA,UAAU,CAACnK,MAAX,GAAoB,CAApB;AACA;AACD;AACF,SA7BoD,CA+BrD;;;AACA,YAAI0M,UAAJ,EAAgB;AACd,cAAIrN,MAAM,GAAG;AACXkK,YAAAA,OAAO,EAAE,IADE;AAEXjG,YAAAA,KAAK,EAAE8G,UAAU,GAAGsC;AAFT,WAAb;;AAKA,cAAI9J,cAAJ,EAAoB;AAClBvD,YAAAA,MAAM,CAACuI,OAAP,GAAiBuC,UAAjB;AACD;;AAED,iBAAO9K,MAAP;AACD;AACF,OA/DY,CAiEb;;;AACA,aAAO;AACLkK,QAAAA,OAAO,EAAE,KADJ;AAELjG,QAAAA,KAAK,EAAE;AAFF,OAAP;AAID;;;WA1ED,mBAAiBwJ,CAAjB,EAAoBnD,OAApB,EAA6B;AAC3B,aAAOA,OAAO,CAAC9F,iBAAf;AACD;;;;;;AA2EH,IAAMkJ,mBAAmB,GAAG,EAA5B;;AAEA,SAASC,QAAT,GAA2B;AACzBD,EAAAA,mBAAmB,CAACvL,IAApB,OAAAuL,mBAAmB,YAAnB;AACD;;AAED,SAASE,cAAT,CAAwB9F,OAAxB,EAAiCwC,OAAjC,EAA0C;AACxC,OAAK,IAAIlH,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGqK,mBAAmB,CAAC/M,MAA1C,EAAkDyC,CAAC,GAAGC,GAAtD,EAA2DD,CAAC,IAAI,CAAhE,EAAmE;AACjE,QAAIyK,aAAa,GAAGH,mBAAmB,CAACtK,CAAD,CAAvC;;AACA,QAAIyK,aAAa,CAACC,SAAd,CAAwBhG,OAAxB,EAAiCwC,OAAjC,CAAJ,EAA+C;AAC7C,aAAO,IAAIuD,aAAJ,CAAkB/F,OAAlB,EAA2BwC,OAA3B,CAAP;AACD;AACF;;AAED,SAAO,IAAID,WAAJ,CAAgBvC,OAAhB,EAAyBwC,OAAzB,CAAP;AACD;;AAED,IAAMyD,eAAe,GAAG;AACtBC,EAAAA,GAAG,EAAE,MADiB;AAEtBC,EAAAA,EAAE,EAAE;AAFkB,CAAxB;AAKA,IAAMC,OAAO,GAAG;AACdC,EAAAA,IAAI,EAAE,OADQ;AAEdC,EAAAA,OAAO,EAAE;AAFK,CAAhB;;AAKA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAC7B,KAAD;AAAA,SACnB,CAAC,EAAEA,KAAK,CAACuB,eAAe,CAACC,GAAjB,CAAL,IAA8BxB,KAAK,CAACuB,eAAe,CAACE,EAAjB,CAArC,CADkB;AAAA,CAArB;;AAGA,IAAMK,MAAM,GAAG,SAATA,MAAS,CAAC9B,KAAD;AAAA,SAAW,CAAC,CAACA,KAAK,CAAC0B,OAAO,CAACC,IAAT,CAAlB;AAAA,CAAf;;AAEA,IAAMI,MAAM,GAAG,SAATA,MAAS,CAAC/B,KAAD;AAAA,SACb,CAAC9M,OAAO,CAAC8M,KAAD,CAAR,IAAmBlM,QAAQ,CAACkM,KAAD,CAA3B,IAAsC,CAAC6B,YAAY,CAAC7B,KAAD,CADtC;AAAA,CAAf;;AAGA,IAAMgC,iBAAiB,GAAG,SAApBA,iBAAoB,CAAChC,KAAD;AAAA,6BACvBuB,eAAe,CAACC,GADO,EACDpN,MAAM,CAACe,IAAP,CAAY6K,KAAZ,EAAmBhF,GAAnB,CAAuB,UAACtG,GAAD;AAAA,+BAC3CA,GAD2C,EACrCsL,KAAK,CAACtL,GAAD,CADgC;AAAA,GAAvB,CADC;AAAA,CAA1B,C,CAMA;AACA;;;AACA,SAASuN,KAAT,CAAejC,KAAf,EAAsBlC,OAAtB,EAAqD;AAAA,mFAAJ,EAAI;AAAA,2BAApBoE,IAAoB;AAAA,MAApBA,IAAoB,4BAAb,IAAa;;AACnD,MAAMC,IAAI,GAAG,SAAPA,IAAO,CAACnC,KAAD,EAAW;AACtB,QAAI7K,IAAI,GAAGf,MAAM,CAACe,IAAP,CAAY6K,KAAZ,CAAX;AAEA,QAAMoC,WAAW,GAAGN,MAAM,CAAC9B,KAAD,CAA1B;;AAEA,QAAI,CAACoC,WAAD,IAAgBjN,IAAI,CAAChB,MAAL,GAAc,CAA9B,IAAmC,CAAC0N,YAAY,CAAC7B,KAAD,CAApD,EAA6D;AAC3D,aAAOmC,IAAI,CAACH,iBAAiB,CAAChC,KAAD,CAAlB,CAAX;AACD;;AAED,QAAI+B,MAAM,CAAC/B,KAAD,CAAV,EAAmB;AACjB,UAAMtL,GAAG,GAAG0N,WAAW,GAAGpC,KAAK,CAAC0B,OAAO,CAACC,IAAT,CAAR,GAAyBxM,IAAI,CAAC,CAAD,CAApD;AAEA,UAAMmG,OAAO,GAAG8G,WAAW,GAAGpC,KAAK,CAAC0B,OAAO,CAACE,OAAT,CAAR,GAA4B5B,KAAK,CAACtL,GAAD,CAA5D;;AAEA,UAAI,CAAChB,QAAQ,CAAC4H,OAAD,CAAb,EAAwB;AACtB,cAAM,IAAIlF,KAAJ,CAAU3B,oCAAoC,CAACC,GAAD,CAA9C,CAAN;AACD;;AAED,UAAMc,GAAG,GAAG;AACVK,QAAAA,KAAK,EAAEM,WAAW,CAACzB,GAAD,CADR;AAEV4G,QAAAA,OAAO,EAAPA;AAFU,OAAZ;;AAKA,UAAI4G,IAAJ,EAAU;AACR1M,QAAAA,GAAG,CAAC6K,QAAJ,GAAee,cAAc,CAAC9F,OAAD,EAAUwC,OAAV,CAA7B;AACD;;AAED,aAAOtI,GAAP;AACD;;AAED,QAAI6M,IAAI,GAAG;AACTC,MAAAA,QAAQ,EAAE,EADD;AAETC,MAAAA,QAAQ,EAAEpN,IAAI,CAAC,CAAD;AAFL,KAAX;AAKAA,IAAAA,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAS;AACpB,UAAMvB,KAAK,GAAG6M,KAAK,CAACtL,GAAD,CAAnB;;AAEA,UAAIxB,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBA,QAAAA,KAAK,CAACoC,OAAN,CAAc,UAAC2E,IAAD,EAAU;AACtBmI,UAAAA,IAAI,CAACC,QAAL,CAAc3M,IAAd,CAAmBwM,IAAI,CAACjI,IAAD,CAAvB;AACD,SAFD;AAGD;AACF,KARD;AAUA,WAAOmI,IAAP;AACD,GA9CD;;AAgDA,MAAI,CAACR,YAAY,CAAC7B,KAAD,CAAjB,EAA0B;AACxBA,IAAAA,KAAK,GAAGgC,iBAAiB,CAAChC,KAAD,CAAzB;AACD;;AAED,SAAOmC,IAAI,CAACnC,KAAD,CAAX;AACD,C,CAED;;;AACA,SAASwC,cAAT,CACEtC,OADF,UAGE;AAAA,qCADE/H,eACF;AAAA,MADEA,eACF,sCADoBC,MAAM,CAACD,eAC3B;AACA+H,EAAAA,OAAO,CAAC3K,OAAR,CAAgB,UAAC/B,MAAD,EAAY;AAC1B,QAAI+K,UAAU,GAAG,CAAjB;AAEA/K,IAAAA,MAAM,CAACsL,OAAP,CAAevJ,OAAf,CAAuB,kBAA0B;AAAA,UAAvBb,GAAuB,UAAvBA,GAAuB;AAAA,UAAlB4D,IAAkB,UAAlBA,IAAkB;AAAA,UAAZb,KAAY,UAAZA,KAAY;AAC/C,UAAM/B,MAAM,GAAGhB,GAAG,GAAGA,GAAG,CAACgB,MAAP,GAAgB,IAAlC;AAEA6I,MAAAA,UAAU,IAAI5F,IAAI,CAACC,GAAL,CACZnB,KAAK,KAAK,CAAV,IAAe/B,MAAf,GAAwB+M,MAAM,CAACC,OAA/B,GAAyCjL,KAD7B,EAEZ,CAAC/B,MAAM,IAAI,CAAX,KAAiByC,eAAe,GAAG,CAAH,GAAOG,IAAvC,CAFY,CAAd;AAID,KAPD;AASA9E,IAAAA,MAAM,CAACiE,KAAP,GAAe8G,UAAf;AACD,GAbD;AAcD;;AAED,SAASoE,gBAAT,CAA0BnP,MAA1B,EAAkC4H,IAAlC,EAAwC;AACtC,MAAM0D,OAAO,GAAGtL,MAAM,CAACsL,OAAvB;AACA1D,EAAAA,IAAI,CAAC0D,OAAL,GAAe,EAAf;;AAEA,MAAI,CAAC/K,SAAS,CAAC+K,OAAD,CAAd,EAAyB;AACvB;AACD;;AAEDA,EAAAA,OAAO,CAACvJ,OAAR,CAAgB,UAACuD,KAAD,EAAW;AACzB,QAAI,CAAC/E,SAAS,CAAC+E,KAAK,CAACiD,OAAP,CAAV,IAA6B,CAACjD,KAAK,CAACiD,OAAN,CAAc5H,MAAhD,EAAwD;AACtD;AACD;;AAHwB,QAKjB4H,OALiB,GAKEjD,KALF,CAKjBiD,OALiB;AAAA,QAKR5I,KALQ,GAKE2F,KALF,CAKR3F,KALQ;AAOzB,QAAIqC,GAAG,GAAG;AACRuG,MAAAA,OAAO,EAAPA,OADQ;AAER5I,MAAAA,KAAK,EAALA;AAFQ,KAAV;;AAKA,QAAI2F,KAAK,CAACpE,GAAV,EAAe;AACbc,MAAAA,GAAG,CAACd,GAAJ,GAAUoE,KAAK,CAACpE,GAAN,CAAUuB,GAApB;AACD;;AAED,QAAI6C,KAAK,CAACpB,GAAN,GAAY,CAAC,CAAjB,EAAoB;AAClBlC,MAAAA,GAAG,CAACoN,QAAJ,GAAe9J,KAAK,CAACpB,GAArB;AACD;;AAED0D,IAAAA,IAAI,CAAC0D,OAAL,CAAanJ,IAAb,CAAkBH,GAAlB;AACD,GArBD;AAsBD;;AAED,SAASqN,cAAT,CAAwBrP,MAAxB,EAAgC4H,IAAhC,EAAsC;AACpCA,EAAAA,IAAI,CAAC3D,KAAL,GAAajE,MAAM,CAACiE,KAApB;AACD;;AAED,SAASqL,MAAT,CACE5C,OADF,EAEEzG,IAFF,EAOE;AAAA,mFADI,EACJ;AAAA,qCAHE1C,cAGF;AAAA,MAHEA,cAGF,sCAHmBqB,MAAM,CAACrB,cAG1B;AAAA,mCAFEK,YAEF;AAAA,MAFEA,YAEF,oCAFiBgB,MAAM,CAAChB,YAExB;;AACA,MAAM2L,YAAY,GAAG,EAArB;AAEA,MAAIhM,cAAJ,EAAoBgM,YAAY,CAACpN,IAAb,CAAkBgN,gBAAlB;AACpB,MAAIvL,YAAJ,EAAkB2L,YAAY,CAACpN,IAAb,CAAkBkN,cAAlB;AAElB,SAAO3C,OAAO,CAAClF,GAAR,CAAY,UAACxH,MAAD,EAAY;AAAA,QACrBkE,GADqB,GACblE,MADa,CACrBkE,GADqB;AAG7B,QAAM0D,IAAI,GAAG;AACXlB,MAAAA,IAAI,EAAET,IAAI,CAAC/B,GAAD,CADC;AAEXkL,MAAAA,QAAQ,EAAElL;AAFC,KAAb;;AAKA,QAAIqL,YAAY,CAAC5O,MAAjB,EAAyB;AACvB4O,MAAAA,YAAY,CAACxN,OAAb,CAAqB,UAACyN,WAAD,EAAiB;AACpCA,QAAAA,WAAW,CAACxP,MAAD,EAAS4H,IAAT,CAAX;AACD,OAFD;AAGD;;AAED,WAAOA,IAAP;AACD,GAfM,CAAP;AAgBD;;IAEK6H,I;AACJ,gBAAYxJ,IAAZ,EAAuC;AAAA,QAArBqE,OAAqB,uEAAX,EAAW;AAAA,QAAPnH,KAAO;;AAAA;;AACrC,SAAKmH,OAAL,mCAAoB1F,MAApB,GAA+B0F,OAA/B;;AAEA,QACE,KAAKA,OAAL,CAAa9F,iBAAb,IACA,CAAC,IAFH,EAGE;AACA,YAAM,IAAI5B,KAAJ,CAAU7B,2BAAV,CAAN;AACD;;AAED,SAAK2O,SAAL,GAAiB,IAAIhO,QAAJ,CAAa,KAAK4I,OAAL,CAAa3I,IAA1B,CAAjB;AAEA,SAAKgO,aAAL,CAAmB1J,IAAnB,EAAyB9C,KAAzB;AACD;;;;WAED,uBAAc8C,IAAd,EAAoB9C,KAApB,EAA2B;AACzB,WAAKyM,KAAL,GAAa3J,IAAb;;AAEA,UAAI9C,KAAK,IAAI,EAAEA,KAAK,YAAY2C,SAAnB,CAAb,EAA4C;AAC1C,cAAM,IAAIlD,KAAJ,CAAU5B,oBAAV,CAAN;AACD;;AAED,WAAK6O,QAAL,GACE1M,KAAK,IACLkE,WAAW,CAAC,KAAKiD,OAAL,CAAa3I,IAAd,EAAoB,KAAKiO,KAAzB,EAAgC;AACzCnL,QAAAA,KAAK,EAAE,KAAK6F,OAAL,CAAa7F;AADqB,OAAhC,CAFb;AAKD;;;WAED,aAAI2B,GAAJ,EAAS;AACP,UAAI,CAAC7F,SAAS,CAAC6F,GAAD,CAAd,EAAqB;AACnB;AACD;;AAED,WAAKwJ,KAAL,CAAWzN,IAAX,CAAgBiE,GAAhB;;AACA,WAAKyJ,QAAL,CAAcC,GAAd,CAAkB1J,GAAlB;AACD;;;WAED,kBAA8C;AAAA,UAAvC2J,SAAuC,uEAA3B;AAAA;AAAC;AAAmB;AAApB;AAAA,OAA2B;AAC5C,UAAMrD,OAAO,GAAG,EAAhB;;AAEA,WAAK,IAAItJ,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAG,KAAKuM,KAAL,CAAWjP,MAAjC,EAAyCyC,CAAC,GAAGC,GAA7C,EAAkDD,CAAC,IAAI,CAAvD,EAA0D;AACxD,YAAMgD,GAAG,GAAG,KAAKwJ,KAAL,CAAWxM,CAAX,CAAZ;;AACA,YAAI2M,SAAS,CAAC3J,GAAD,EAAMhD,CAAN,CAAb,EAAuB;AACrB,eAAK4M,QAAL,CAAc5M,CAAd;AACAA,UAAAA,CAAC,IAAI,CAAL;AACAC,UAAAA,GAAG,IAAI,CAAP;AAEAqJ,UAAAA,OAAO,CAACvK,IAAR,CAAaiE,GAAb;AACD;AACF;;AAED,aAAOsG,OAAP;AACD;;;WAED,kBAASxI,GAAT,EAAc;AACZ,WAAK0L,KAAL,CAAWnJ,MAAX,CAAkBvC,GAAlB,EAAuB,CAAvB;;AACA,WAAK2L,QAAL,CAAcG,QAAd,CAAuB9L,GAAvB;AACD;;;WAED,oBAAW;AACT,aAAO,KAAK2L,QAAZ;AACD;;;WAED,gBAAOrD,KAAP,EAAmC;AAAA,uFAAJ,EAAI;AAAA,gCAAnByD,KAAmB;AAAA,UAAnBA,KAAmB,6BAAX,CAAC,CAAU;;AAAA,2BAO7B,KAAK3F,OAPwB;AAAA,UAE/B/G,cAF+B,kBAE/BA,cAF+B;AAAA,UAG/BK,YAH+B,kBAG/BA,YAH+B;AAAA,UAI/BC,UAJ+B,kBAI/BA,UAJ+B;AAAA,UAK/BC,MAL+B,kBAK/BA,MAL+B;AAAA,UAM/Ba,eAN+B,kBAM/BA,eAN+B;AASjC,UAAI+H,OAAO,GAAGxM,QAAQ,CAACsM,KAAD,CAAR,GACVtM,QAAQ,CAAC,KAAK0P,KAAL,CAAW,CAAX,CAAD,CAAR,GACE,KAAKM,iBAAL,CAAuB1D,KAAvB,CADF,GAEE,KAAK2D,iBAAL,CAAuB3D,KAAvB,CAHQ,GAIV,KAAK4D,cAAL,CAAoB5D,KAApB,CAJJ;AAMAwC,MAAAA,cAAc,CAACtC,OAAD,EAAU;AAAE/H,QAAAA,eAAe,EAAfA;AAAF,OAAV,CAAd;;AAEA,UAAId,UAAJ,EAAgB;AACd6I,QAAAA,OAAO,CAAC2D,IAAR,CAAavM,MAAb;AACD;;AAED,UAAI3D,QAAQ,CAAC8P,KAAD,CAAR,IAAmBA,KAAK,GAAG,CAAC,CAAhC,EAAmC;AACjCvD,QAAAA,OAAO,GAAGA,OAAO,CAAC4D,KAAR,CAAc,CAAd,EAAiBL,KAAjB,CAAV;AACD;;AAED,aAAOX,MAAM,CAAC5C,OAAD,EAAU,KAAKkD,KAAf,EAAsB;AACjCrM,QAAAA,cAAc,EAAdA,cADiC;AAEjCK,QAAAA,YAAY,EAAZA;AAFiC,OAAtB,CAAb;AAID;;;WAED,2BAAkB4I,KAAlB,EAAyB;AACvB,UAAMK,QAAQ,GAAGe,cAAc,CAACpB,KAAD,EAAQ,KAAKlC,OAAb,CAA/B;AADuB,UAEfpE,OAFe,GAEH,KAAK2J,QAFF,CAEf3J,OAFe;AAGvB,UAAMwG,OAAO,GAAG,EAAhB,CAHuB,CAKvB;;AACAxG,MAAAA,OAAO,CAACnE,OAAR,CAAgB,kBAAkC;AAAA,YAA5B6G,IAA4B,UAA/BhC,CAA+B;AAAA,YAAnB1C,GAAmB,UAAtBd,CAAsB;AAAA,YAAX0B,IAAW,UAAdW,CAAc;;AAChD,YAAI,CAAClF,SAAS,CAACqI,IAAD,CAAd,EAAsB;AACpB;AACD;;AAH+C,iCAKZiE,QAAQ,CAACZ,QAAT,CAAkBrD,IAAlB,CALY;AAAA,YAKxCsB,OALwC,sBAKxCA,OALwC;AAAA,YAK/BjG,KAL+B,sBAK/BA,KAL+B;AAAA,YAKxBsE,OALwB,sBAKxBA,OALwB;;AAOhD,YAAI2B,OAAJ,EAAa;AACXwC,UAAAA,OAAO,CAACvK,IAAR,CAAa;AACXuE,YAAAA,IAAI,EAAEkC,IADK;AAEX1E,YAAAA,GAAG,EAAHA,GAFW;AAGXoH,YAAAA,OAAO,EAAE,CAAC;AAAErH,cAAAA,KAAK,EAALA,KAAF;AAAStE,cAAAA,KAAK,EAAEiJ,IAAhB;AAAsB9D,cAAAA,IAAI,EAAJA,IAAtB;AAA4ByD,cAAAA,OAAO,EAAPA;AAA5B,aAAD;AAHE,WAAb;AAKD;AACF,OAdD;AAgBA,aAAOmE,OAAP;AACD;;;WAED,wBAAeF,KAAf,EAAsB;AAAA;;AAEpB,UAAM+D,UAAU,GAAG9B,KAAK,CAACjC,KAAD,EAAQ,KAAKlC,OAAb,CAAxB;;AAEA,UAAMkG,QAAQ,GAAG,SAAXA,QAAW,CAAC3B,IAAD,EAAOnI,IAAP,EAAaxC,GAAb,EAAqB;AACpC,YAAI,CAAC2K,IAAI,CAACC,QAAV,EAAoB;AAAA,cACVzM,KADU,GACUwM,IADV,CACVxM,KADU;AAAA,cACHwK,QADG,GACUgC,IADV,CACHhC,QADG;;AAGlB,cAAMvB,OAAO,GAAG,MAAI,CAACmF,YAAL,CAAkB;AAChCvP,YAAAA,GAAG,EAAE,MAAI,CAACwO,SAAL,CAAe3M,GAAf,CAAmBV,KAAnB,CAD2B;AAEhC1C,YAAAA,KAAK,EAAE,MAAI,CAACkQ,QAAL,CAAca,sBAAd,CAAqChK,IAArC,EAA2CrE,KAA3C,CAFyB;AAGhCwK,YAAAA,QAAQ,EAARA;AAHgC,WAAlB,CAAhB;;AAMA,cAAIvB,OAAO,IAAIA,OAAO,CAAC3K,MAAvB,EAA+B;AAC7B,mBAAO,CACL;AACEuD,cAAAA,GAAG,EAAHA,GADF;AAEEwC,cAAAA,IAAI,EAAJA,IAFF;AAGE4E,cAAAA,OAAO,EAAPA;AAHF,aADK,CAAP;AAOD;;AAED,iBAAO,EAAP;AACD;AAED;;;AACA,gBAAQuD,IAAI,CAACE,QAAb;AACE,eAAKhB,eAAe,CAACC,GAArB;AAA0B;AACxB,kBAAM2C,GAAG,GAAG,EAAZ;;AACA,mBAAK,IAAIvN,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGwL,IAAI,CAACC,QAAL,CAAcnO,MAApC,EAA4CyC,CAAC,GAAGC,GAAhD,EAAqDD,CAAC,IAAI,CAA1D,EAA6D;AAC3D,oBAAMwN,KAAK,GAAG/B,IAAI,CAACC,QAAL,CAAc1L,CAAd,CAAd;AACA,oBAAMpD,MAAM,GAAGwQ,QAAQ,CAACI,KAAD,EAAQlK,IAAR,EAAcxC,GAAd,CAAvB;;AACA,oBAAIlE,MAAM,CAACW,MAAX,EAAmB;AACjBgQ,kBAAAA,GAAG,CAACxO,IAAJ,OAAAwO,GAAG,qBAAS3Q,MAAT,EAAH;AACD,iBAFD,MAEO;AACL,yBAAO,EAAP;AACD;AACF;;AACD,qBAAO2Q,GAAP;AACD;;AACD,eAAK5C,eAAe,CAACE,EAArB;AAAyB;AACvB,kBAAM0C,IAAG,GAAG,EAAZ;;AACA,mBAAK,IAAIvN,GAAC,GAAG,CAAR,EAAWC,IAAG,GAAGwL,IAAI,CAACC,QAAL,CAAcnO,MAApC,EAA4CyC,GAAC,GAAGC,IAAhD,EAAqDD,GAAC,IAAI,CAA1D,EAA6D;AAC3D,oBAAMwN,MAAK,GAAG/B,IAAI,CAACC,QAAL,CAAc1L,GAAd,CAAd;;AACA,oBAAMpD,QAAM,GAAGwQ,QAAQ,CAACI,MAAD,EAAQlK,IAAR,EAAcxC,GAAd,CAAvB;;AACA,oBAAIlE,QAAM,CAACW,MAAX,EAAmB;AACjBgQ,kBAAAA,IAAG,CAACxO,IAAJ,OAAAwO,IAAG,qBAAS3Q,QAAT,EAAH;;AACA;AACD;AACF;;AACD,qBAAO2Q,IAAP;AACD;AAzBH;AA2BD,OAnDD;;AAqDA,UAAMzK,OAAO,GAAG,KAAK2J,QAAL,CAAc3J,OAA9B;AACA,UAAM2K,SAAS,GAAG,EAAlB;AACA,UAAMnE,OAAO,GAAG,EAAhB;AAEAxG,MAAAA,OAAO,CAACnE,OAAR,CAAgB,kBAAyB;AAAA,YAAnB2E,IAAmB,UAAtBG,CAAsB;AAAA,YAAV3C,GAAU,UAAbd,CAAa;;AACvC,YAAI7C,SAAS,CAACmG,IAAD,CAAb,EAAqB;AACnB,cAAIoK,UAAU,GAAGN,QAAQ,CAACD,UAAD,EAAa7J,IAAb,EAAmBxC,GAAnB,CAAzB;;AAEA,cAAI4M,UAAU,CAACnQ,MAAf,EAAuB;AACrB;AACA,gBAAI,CAACkQ,SAAS,CAAC3M,GAAD,CAAd,EAAqB;AACnB2M,cAAAA,SAAS,CAAC3M,GAAD,CAAT,GAAiB;AAAEA,gBAAAA,GAAG,EAAHA,GAAF;AAAOwC,gBAAAA,IAAI,EAAJA,IAAP;AAAa4E,gBAAAA,OAAO,EAAE;AAAtB,eAAjB;AACAoB,cAAAA,OAAO,CAACvK,IAAR,CAAa0O,SAAS,CAAC3M,GAAD,CAAtB;AACD;;AACD4M,YAAAA,UAAU,CAAC/O,OAAX,CAAmB,kBAAiB;AAAA;;AAAA,kBAAduJ,OAAc,UAAdA,OAAc;;AAClC,uCAAAuF,SAAS,CAAC3M,GAAD,CAAT,CAAeoH,OAAf,EAAuBnJ,IAAvB,iDAA+BmJ,OAA/B;AACD,aAFD;AAGD;AACF;AACF,OAfD;AAiBA,aAAOoB,OAAP;AACD;;;WAED,2BAAkBF,KAAlB,EAAyB;AAAA;;AACvB,UAAMK,QAAQ,GAAGe,cAAc,CAACpB,KAAD,EAAQ,KAAKlC,OAAb,CAA/B;AADuB,2BAEG,KAAKuF,QAFR;AAAA,UAEflO,IAFe,kBAEfA,IAFe;AAAA,UAETuE,OAFS,kBAETA,OAFS;AAGvB,UAAMwG,OAAO,GAAG,EAAhB,CAHuB,CAKvB;;AACAxG,MAAAA,OAAO,CAACnE,OAAR,CAAgB,kBAAyB;AAAA,YAAnB2E,IAAmB,UAAtBG,CAAsB;AAAA,YAAV3C,GAAU,UAAbd,CAAa;;AACvC,YAAI,CAAC7C,SAAS,CAACmG,IAAD,CAAd,EAAsB;AACpB;AACD;;AAED,YAAI4E,OAAO,GAAG,EAAd,CALuC,CAOvC;;AACA3J,QAAAA,IAAI,CAACI,OAAL,CAAa,UAACb,GAAD,EAAM4F,QAAN,EAAmB;AAC9BwE,UAAAA,OAAO,CAACnJ,IAAR,OAAAmJ,OAAO,qBACF,MAAI,CAACmF,YAAL,CAAkB;AACnBvP,YAAAA,GAAG,EAAHA,GADmB;AAEnBvB,YAAAA,KAAK,EAAE+G,IAAI,CAACI,QAAD,CAFQ;AAGnB+F,YAAAA,QAAQ,EAARA;AAHmB,WAAlB,CADE,EAAP;AAOD,SARD;;AAUA,YAAIvB,OAAO,CAAC3K,MAAZ,EAAoB;AAClB+L,UAAAA,OAAO,CAACvK,IAAR,CAAa;AACX+B,YAAAA,GAAG,EAAHA,GADW;AAEXwC,YAAAA,IAAI,EAAJA,IAFW;AAGX4E,YAAAA,OAAO,EAAPA;AAHW,WAAb;AAKD;AACF,OAzBD;AA2BA,aAAOoB,OAAP;AACD;;;WACD,8BAAuC;AAAA,UAAxBxL,GAAwB,UAAxBA,GAAwB;AAAA,UAAnBvB,KAAmB,UAAnBA,KAAmB;AAAA,UAAZkN,QAAY,UAAZA,QAAY;;AACrC,UAAI,CAACtM,SAAS,CAACZ,KAAD,CAAd,EAAuB;AACrB,eAAO,EAAP;AACD;;AAED,UAAI2L,OAAO,GAAG,EAAd;;AAEA,UAAI5L,OAAO,CAACC,KAAD,CAAX,EAAoB;AAClBA,QAAAA,KAAK,CAACoC,OAAN,CAAc,kBAAkC;AAAA,cAA5B6G,IAA4B,UAA/BhC,CAA+B;AAAA,cAAnB1C,GAAmB,UAAtBd,CAAsB;AAAA,cAAX0B,IAAW,UAAdW,CAAc;;AAC9C,cAAI,CAAClF,SAAS,CAACqI,IAAD,CAAd,EAAsB;AACpB;AACD;;AAH6C,oCAKViE,QAAQ,CAACZ,QAAT,CAAkBrD,IAAlB,CALU;AAAA,cAKtCsB,OALsC,uBAKtCA,OALsC;AAAA,cAK7BjG,KAL6B,uBAK7BA,KAL6B;AAAA,cAKtBsE,OALsB,uBAKtBA,OALsB;;AAO9C,cAAI2B,OAAJ,EAAa;AACXoB,YAAAA,OAAO,CAACnJ,IAAR,CAAa;AACX8B,cAAAA,KAAK,EAALA,KADW;AAEX/C,cAAAA,GAAG,EAAHA,GAFW;AAGXvB,cAAAA,KAAK,EAAEiJ,IAHI;AAIX1E,cAAAA,GAAG,EAAHA,GAJW;AAKXY,cAAAA,IAAI,EAAJA,IALW;AAMXyD,cAAAA,OAAO,EAAPA;AANW,aAAb;AAQD;AACF,SAjBD;AAkBD,OAnBD,MAmBO;AAAA,YACMK,IADN,GACwBjJ,KADxB,CACGiH,CADH;AAAA,YACe9B,KADf,GACwBnF,KADxB,CACY8F,CADZ;;AAAA,kCAG+BoH,QAAQ,CAACZ,QAAT,CAAkBrD,IAAlB,CAH/B;AAAA,YAGGsB,OAHH,uBAGGA,OAHH;AAAA,YAGYjG,KAHZ,uBAGYA,KAHZ;AAAA,YAGmBsE,OAHnB,uBAGmBA,OAHnB;;AAKL,YAAI2B,OAAJ,EAAa;AACXoB,UAAAA,OAAO,CAACnJ,IAAR,CAAa;AAAE8B,YAAAA,KAAK,EAALA,KAAF;AAAS/C,YAAAA,GAAG,EAAHA,GAAT;AAAcvB,YAAAA,KAAK,EAAEiJ,IAArB;AAA2B9D,YAAAA,IAAI,EAAJA,KAA3B;AAAiCyD,YAAAA,OAAO,EAAPA;AAAjC,WAAb;AACD;AACF;;AAED,aAAO+C,OAAP;AACD;;;;;;AAGHmE,IAAI,CAACsB,OAAL,GAAe,OAAf;AACAtB,IAAI,CAACpI,WAAL,GAAmBA,WAAnB;AACAoI,IAAI,CAAC9H,UAAL,GAAkBA,UAAlB;AACA8H,IAAI,CAACuB,MAAL,GAAcpM,MAAd;AAEA;AACE6K,EAAAA,IAAI,CAAClD,UAAL,GAAkBkC,KAAlB;AACD;AAED;AACEd,EAAAA,QAAQ,CAACP,cAAD,CAAR;AACD;AAED,eAAeqC,IAAf","sourcesContent":["/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray\n    ? getTag(value) === '[object Array]'\n    : Array.isArray(value)\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\nconst INFINITY = 1 / 0;\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value\n  }\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value)\n}\n\nfunction isString(value) {\n  return typeof value === 'string'\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number'\n}\n\n// Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\nfunction isBoolean(value) {\n  return (\n    value === true ||\n    value === false ||\n    (isObjectLike(value) && getTag(value) == '[object Boolean]')\n  )\n}\n\nfunction isObject(value) {\n  return typeof value === 'object'\n}\n\n// Checks if `value` is object-like.\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null\n}\n\nfunction isBlank(value) {\n  return !value.trim().length\n}\n\n// Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\nfunction getTag(value) {\n  return value == null\n    ? value === undefined\n      ? '[object Undefined]'\n      : '[object Null]'\n    : Object.prototype.toString.call(value)\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\n\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = (key) =>\n  `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = (max) =>\n  `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = (name) => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = (key) =>\n  `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n\n    let totalWeight = 0;\n\n    keys.forEach((key) => {\n      let obj = createKey(key);\n\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n      this._keyMap[obj.id] = obj;\n\n      totalWeight += obj.weight;\n    });\n\n    // Normalize weights so that their sum is equal to 1\n    this._keys.forEach((key) => {\n      key.weight /= totalWeight;\n    });\n  }\n  get(keyId) {\n    return this._keyMap[keyId]\n  }\n  keys() {\n    return this._keys\n  }\n  toJSON() {\n    return JSON.stringify(this._keys)\n  }\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'))\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name))\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return { path, id, weight, src }\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.')\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return\n    }\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n      if (\n        index === path.length - 1 &&\n        (isString(value) || isNumber(value) || isBoolean(value))\n      ) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true;\n        // Search each item in the array.\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  };\n\n  // Backwards compatibility (since path used to be a string)\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n\n  return arr ? list : list[0]\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\n\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) =>\n    a.score === b.score ? (a.idx < b.idx ? -1 : 1) : a.score < b.score ? -1 : 1\n};\n\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\n\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\n\nvar Config = {\n  ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\n\nconst SPACE = /[^ ]+/g;\n\n// Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens)\n      }\n\n      const norm = 1 / Math.sqrt(numTokens);\n\n      // In place of `toFixed(mantissa)`, for faster computation\n      const n = parseFloat(Math.round(norm * m) / m);\n\n      cache.set(numTokens, n);\n\n      return n\n    },\n    clear() {\n      cache.clear();\n    }\n  }\n}\n\nclass FuseIndex {\n  constructor({ getFn = Config.getFn } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n\n    this.setIndexRecords();\n  }\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return\n    }\n\n    this.isCreated = true;\n\n    // List is Array<String>\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  }\n  // Adds a doc to the end of the index\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  }\n  // Removes the doc at the specified index of the index\n  removeAt(idx) {\n    this.records.splice(idx, 1);\n\n    // Change ref index of every subsquent doc\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]]\n  }\n  size() {\n    return this.records.length\n  }\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n\n    this.records.push(record);\n  }\n  _addObject(doc, docIndex) {\n    let record = { i: docIndex, $: {} };\n\n    // Iterate over every key (i.e, path), and fetch the value at that key\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{ nestedArrIndex: -1, value }];\n\n        while (stack.length) {\n          const { nestedArrIndex, value } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n\n        record.$[keyIndex] = subRecord;\n      }\n    });\n\n    this.records.push(record);\n  }\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    }\n  }\n}\n\nfunction createIndex(keys, docs, { getFn = Config.getFn } = {}) {\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex\n}\n\nfunction parseIndex(data, { getFn = Config.getFn } = {}) {\n  const { keys, records } = data;\n  const myIndex = new FuseIndex({ getFn });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex\n}\n\nfunction computeScore(\n  pattern,\n  {\n    errors = 0,\n    currentLocation = 0,\n    expectedLocation = 0,\n    distance = Config.distance,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy\n  }\n\n  return accuracy + proximity / distance\n}\n\nfunction convertMaskToIndices(\n  matchmask = [],\n  minMatchCharLength = Config.minMatchCharLength\n) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n      start = -1;\n    }\n  }\n\n  // (i-1 - start) + 1 => i - start\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices\n}\n\n// Machine word size\nconst MAX_BITS = 32;\n\nfunction search(\n  text,\n  pattern,\n  patternAlphabet,\n  {\n    location = Config.location,\n    distance = Config.distance,\n    threshold = Config.threshold,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    includeMatches = Config.includeMatches,\n    ignoreLocation = Config.ignoreLocation\n  } = {}\n) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS))\n  }\n\n  const patternLen = pattern.length;\n  // Set starting location at beginning text and initialize the alphabet.\n  const textLen = text.length;\n  // Handle the case when location > text.length\n  const expectedLocation = Math.max(0, Math.min(location, textLen));\n  // Highest score beyond which we give up.\n  let currentThreshold = threshold;\n  // Is there a nearby exact match? (speedup)\n  let bestLocation = expectedLocation;\n\n  // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n  const computeMatches = minMatchCharLength > 1 || includeMatches;\n  // A mask of the matches, used for building the indices\n  const matchMask = computeMatches ? Array(textLen) : [];\n\n  let index;\n\n  // Get all exact matches, here for speed up\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  }\n\n  // Reset the best location\n  bestLocation = -1;\n\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n\n  const mask = 1 << (patternLen - 1);\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    }\n\n    // Use the result from this iteration as the maximum for the next.\n    binMax = binMid;\n\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches\n      ? textLen\n      : Math.min(expectedLocation + binMid, textLen) + patternLen;\n\n    // Initialize the bit array\n    let bitArr = Array(finish + 2);\n\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      }\n\n      // First pass: exact match\n      bitArr[j] = ((bitArr[j + 1] << 1) | 1) & charMatch;\n\n      // Subsequent passes: fuzzy match\n      if (i) {\n        bitArr[j] |=\n          ((lastBitArr[j + 1] | lastBitArr[j]) << 1) | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        });\n\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation;\n\n          // Already passed `loc`, downhill from here on in.\n          if (bestLocation <= expectedLocation) {\n            break\n          }\n\n          // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    }\n\n    // No hope for a (better) match at greater error levels.\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | (1 << (len - i - 1));\n  }\n\n  return mask\n}\n\nclass BitapSearch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const { isCaseSensitive, includeMatches } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    }\n\n    // Exact match\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result\n    }\n\n    // Otherwise, use Bitap algorithm\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n\n    this.chunks.forEach(({ pattern, alphabet, startIndex }) => {\n      const { isMatch, score, indices } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result\n  }\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex)\n  }\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex)\n  }\n  search(/*text*/) {}\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null\n}\n\n// Token: 'file\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'exact'\n  }\n  static get multiRegex() {\n    return /^=\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^=(.*)$/\n  }\n  search(text) {\n    const isMatch = text === this.pattern;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !fire\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!(.*)$/\n  }\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: ^file\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'prefix-exact'\n  }\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    }\n  }\n}\n\n// Token: !^fire\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-prefix-exact'\n  }\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^!\\^(.*)$/\n  }\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\n// Token: .file$\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'suffix-exact'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    }\n  }\n}\n\n// Token: !.file$\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'inverse-suffix-exact'\n  }\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/\n  }\n  static get singleRegex() {\n    return /^!(.*)\\$$/\n  }\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    }\n  }\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(\n    pattern,\n    {\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance,\n      includeMatches = Config.includeMatches,\n      findAllMatches = Config.findAllMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      isCaseSensitive = Config.isCaseSensitive,\n      ignoreLocation = Config.ignoreLocation\n    } = {}\n  ) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n  static get type() {\n    return 'fuzzy'\n  }\n  static get multiRegex() {\n    return /^\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^(.*)$/\n  }\n  search(text) {\n    return this._bitapSearch.searchIn(text)\n  }\n}\n\n// Token: 'file\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n  static get type() {\n    return 'include'\n  }\n  static get multiRegex() {\n    return /^'\"(.*)\"$/\n  }\n  static get singleRegex() {\n    return /^'(.*)$/\n  }\n  search(text) {\n    let location = 0;\n    let index;\n\n    const indices = [];\n    const patternLen = this.pattern.length;\n\n    // Get all exact matches\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    }\n  }\n}\n\n// ❗Order is important. DO NOT CHANGE.\nconst searchers = [\n  ExactMatch,\n  IncludeMatch,\n  PrefixExactMatch,\n  InversePrefixExactMatch,\n  InverseSuffixExactMatch,\n  SuffixExactMatch,\n  InverseExactMatch,\n  FuzzyMatch\n];\n\nconst searchersLen = searchers.length;\n\n// Regex to split by spaces, but keep anything in quotes together\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|';\n\n// Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map((item) => {\n    let query = item\n      .trim()\n      .split(SPACE_RE)\n      .filter((item) => item && !!item.trim());\n\n    let results = [];\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i];\n\n      // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n      let found = false;\n      let idx = -1;\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue\n      }\n\n      // 2. Handle single query matches (i.e, once that are *not* quoted)\n      idx = -1;\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n        if (token) {\n          results.push(new searcher(token, options));\n          break\n        }\n      }\n    }\n\n    return results\n  })\n}\n\n// These extended matchers can return an array of matches, as opposed\n// to a singl match\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\nclass ExtendedSearch {\n  constructor(\n    pattern,\n    {\n      isCaseSensitive = Config.isCaseSensitive,\n      includeMatches = Config.includeMatches,\n      minMatchCharLength = Config.minMatchCharLength,\n      ignoreLocation = Config.ignoreLocation,\n      findAllMatches = Config.findAllMatches,\n      location = Config.location,\n      threshold = Config.threshold,\n      distance = Config.distance\n    } = {}\n  ) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      }\n    }\n\n    const { includeMatches, isCaseSensitive } = this.options;\n\n    text = isCaseSensitive ? text : text.toLowerCase();\n\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0;\n\n    // ORs\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i];\n\n      // Reset indices\n      allIndices.length = 0;\n      numMatches = 0;\n\n      // ANDs\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const { isMatch, indices, score } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break\n        }\n      }\n\n      // OR condition, so if TRUE, return\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result\n      }\n    }\n\n    // Nothing was matched\n    return {\n      isMatch: false,\n      score: 1\n    }\n  }\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options)\n    }\n  }\n\n  return new BitapSearch(pattern, options)\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\n\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = (query) =>\n  !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = (query) => !!query[KeyType.PATH];\n\nconst isLeaf = (query) =>\n  !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = (query) => ({\n  [LogicalOperator.AND]: Object.keys(query).map((key) => ({\n    [key]: query[key]\n  }))\n});\n\n// When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\nfunction parse(query, options, { auto = true } = {}) {\n  const next = (query) => {\n    let keys = Object.keys(query);\n\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query))\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key))\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n\n    keys.forEach((key) => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach((item) => {\n          node.children.push(next(item));\n        });\n      }\n    });\n\n    return node\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query)\n}\n\n// Practical scoring function\nfunction computeScore$1(\n  results,\n  { ignoreFieldNorm = Config.ignoreFieldNorm }\n) {\n  results.forEach((result) => {\n    let totalScore = 1;\n\n    result.matches.forEach(({ key, norm, score }) => {\n      const weight = key ? key.weight : null;\n\n      totalScore *= Math.pow(\n        score === 0 && weight ? Number.EPSILON : score,\n        (weight || 1) * (ignoreFieldNorm ? 1 : norm)\n      );\n    });\n\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return\n  }\n\n  matches.forEach((match) => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return\n    }\n\n    const { indices, value } = match;\n\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(\n  results,\n  docs,\n  {\n    includeMatches = Config.includeMatches,\n    includeScore = Config.includeScore\n  } = {}\n) {\n  const transformers = [];\n\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n\n  return results.map((result) => {\n    const { idx } = result;\n\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach((transformer) => {\n        transformer(result, data);\n      });\n    }\n\n    return data\n  })\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config, ...options };\n\n    if (\n      this.options.useExtendedSearch &&\n      !true\n    ) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE)\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE)\n    }\n\n    this._myIndex =\n      index ||\n      createIndex(this.options.keys, this._docs, {\n        getFn: this.options.getFn\n      });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return\n    }\n\n    this._docs.push(doc);\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = (/* doc, idx */) => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n\n        results.push(doc);\n      }\n    }\n\n    return results\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex\n  }\n\n  search(query, { limit = -1 } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n\n    let results = isString(query)\n      ? isString(this._docs[0])\n        ? this._searchStringList(query)\n        : this._searchObjectList(query)\n      : this._searchLogical(query);\n\n    computeScore$1(results, { ignoreFieldNorm });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    })\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { records } = this._myIndex;\n    const results = [];\n\n    // Iterate over every string in the index\n    records.forEach(({ v: text, i: idx, n: norm }) => {\n      if (!isDefined(text)) {\n        return\n      }\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{ score, value: text, norm, indices }]\n        });\n      }\n    });\n\n    return results\n  }\n\n  _searchLogical(query) {\n\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const { keyId, searcher } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [\n            {\n              idx,\n              item,\n              matches\n            }\n          ]\n        }\n\n        return []\n      }\n\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n      switch (node.operator) {\n        case LogicalOperator.AND: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n            } else {\n              return []\n            }\n          }\n          return res\n        }\n        case LogicalOperator.OR: {\n          const res = [];\n          for (let i = 0, len = node.children.length; i < len; i += 1) {\n            const child = node.children[i];\n            const result = evaluate(child, item, idx);\n            if (result.length) {\n              res.push(...result);\n              break\n            }\n          }\n          return res\n        }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n\n    records.forEach(({ $: item, i: idx }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = { idx, item, matches: [] };\n            results.push(resultMap[idx]);\n          }\n          expResults.forEach(({ matches }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n\n    return results\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const { keys, records } = this._myIndex;\n    const results = [];\n\n    // List is Array<Object>\n    records.forEach(({ $: item, i: idx }) => {\n      if (!isDefined(item)) {\n        return\n      }\n\n      let matches = [];\n\n      // Iterate over every key (i.e, path), and fetch the value at that key\n      keys.forEach((key, keyIndex) => {\n        matches.push(\n          ...this._findMatches({\n            key,\n            value: item[keyIndex],\n            searcher\n          })\n        );\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n\n    return results\n  }\n  _findMatches({ key, value, searcher }) {\n    if (!isDefined(value)) {\n      return []\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({ v: text, i: idx, n: norm }) => {\n        if (!isDefined(text)) {\n          return\n        }\n\n        const { isMatch, score, indices } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const { v: text, n: norm } = value;\n\n      const { isMatch, score, indices } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({ score, key, value: text, norm, indices });\n      }\n    }\n\n    return matches\n  }\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n\n{\n  Fuse.parseQuery = parse;\n}\n\n{\n  register(ExtendedSearch);\n}\n\nexport default Fuse;\n"]},"metadata":{},"sourceType":"module"}