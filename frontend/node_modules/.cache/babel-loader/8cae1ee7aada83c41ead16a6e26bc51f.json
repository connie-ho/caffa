{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport reducer, { SET_APPLICATION_DATA, SET_FAVOURITE, SET_REVIEW, SET_COFFEE } from \"../reducers/application\";\nimport { getRegions, getReviewsForCoffee, avgRatingForCoffee } from \"../helpers/selectors\";\n\nfunction useApplicationData() {\n  _s();\n\n  const [state, dispatch] = useReducer(reducer, {\n    users: {},\n    coffees: {},\n    reviews: {},\n    favourites: {},\n    regions: {}\n  });\n  useEffect(() => {\n    Promise.all([axios.get(\"/api/users\"), axios.get(\"/api/coffees\"), axios.get(\"/api/reviews\"), axios.get(\"/api/favourites\")]).then(all => {\n      // copy users into an object\n      const users = {};\n\n      for (const user of all[0].data) {\n        users[user.id] = user;\n      } // copy coffeess into an object\n\n\n      const coffees = {};\n\n      for (const coffee of all[1].data) {\n        coffees[coffee.id] = coffee;\n      } // copy reviews into an object\n\n\n      const reviews = {};\n\n      for (const review of all[2].data) {\n        reviews[review.id] = review;\n      } // copy favourites into an object\n\n\n      const favourites = {};\n\n      for (const fav of all[3].data) {\n        favourites[fav.id] = fav;\n      }\n\n      const regions = getRegions(Object.values(coffees));\n      dispatch({\n        type: SET_APPLICATION_DATA,\n        users,\n        coffees,\n        reviews,\n        favourites,\n        regions\n      });\n    });\n  }, []);\n\n  function addFavourite(coffee_id, user_id) {\n    const req = {\n      coffee_id,\n      user_id\n    };\n    return axios.post(`/api/favourites`, req).then(res => {\n      const favourite = { ...res.data\n      };\n      const favourites = { ...state.favourites,\n        [res.data.id]: favourite\n      };\n      dispatch({\n        type: SET_FAVOURITE,\n        favourites\n      });\n      return res.data.id;\n    });\n  }\n\n  function deleteFavourite(id) {\n    const favourites = { ...state.favourites,\n      [id]: null\n    };\n    return axios.delete(`/api/favourites/${id}`).then(res => {\n      dispatch({\n        type: SET_FAVOURITE,\n        favourites\n      });\n    });\n  }\n\n  function addReview(params) {\n    const {\n      coffee_id,\n      user_id,\n      description,\n      rating\n    } = params;\n    const req = {\n      coffee_id,\n      user_id,\n      description,\n      rating\n    };\n    return axios.post(`/api/reviews`, req).then(res => {\n      const review = { ...res.data\n      };\n      const reviews = { ...state.reviews,\n        [res.data.id]: review\n      }; // updating coffee rating\n\n      const coffeeReviews = getReviewsForCoffee(Object.values(reviews), coffee_id);\n      const avgRating = avgRatingForCoffee(coffeeReviews);\n      const coffee = { ...state.coffees[coffee_id],\n        avg_rating: avgRating\n      };\n      dispatch({\n        type: SET_COFFEE,\n        coffee\n      });\n      dispatch({\n        type: SET_REVIEW,\n        reviews\n      });\n      return res.data.id;\n    });\n  }\n\n  function deleteReview(id) {\n    const coffee_id = state.reviews[id].coffee_id;\n    const reviews = { ...state.reviews,\n      [id]: null\n    }; // updating coffee rating\n\n    const coffeeReviews = getReviewsForCoffee(Object.values(reviews), coffee_id);\n    const avgRating = avgRatingForCoffee(coffeeReviews);\n    const coffee = { ...state.coffees[coffee_id],\n      avg_rating: avgRating\n    };\n    return axios.delete(`/api/reviews/${id}`).then(res => {\n      dispatch({\n        type: SET_COFFEE,\n        coffee\n      });\n      dispatch({\n        type: SET_REVIEW,\n        reviews\n      });\n    });\n  }\n\n  function editReview(params) {\n    const {\n      description,\n      rating,\n      id\n    } = params;\n    const req = {\n      id,\n      description,\n      rating\n    };\n    return axios.patch(`/api/reviews/${id}`, req).then(res => {\n      const review = { ...res.data\n      };\n      const reviews = { ...state.reviews,\n        [id]: review\n      }; // updating coffee rating\n\n      const coffeeReviews = getReviewsForCoffee(Object.values(reviews), res.data.coffee_id);\n      const avgRating = avgRatingForCoffee(coffeeReviews);\n      const coffee = { ...state.coffees[res.data.coffee_id],\n        avg_rating: avgRating\n      };\n      dispatch({\n        type: SET_COFFEE,\n        coffee\n      });\n      dispatch({\n        type: SET_REVIEW,\n        reviews\n      });\n    });\n  }\n\n  function addCoffee(formData) {\n    return axios.post(`/api/coffees`, formData).then(res => {\n      const coffee = { ...res.data\n      };\n      dispatch({\n        type: SET_COFFEE,\n        coffee\n      });\n      return res.data.id;\n    });\n  }\n\n  return {\n    state,\n    addFavourite,\n    deleteFavourite,\n    addReview,\n    editReview,\n    deleteReview,\n    addCoffee\n  };\n}\n\n_s(useApplicationData, \"zAf04O73q5fOig+uVbcKjewGLwE=\");\n\nexport default useApplicationData;","map":{"version":3,"sources":["/home/kevin/lighthouse/caffa-deploy/caffa/frontend/src/hooks/useApplicationData.js"],"names":["useEffect","useReducer","axios","reducer","SET_APPLICATION_DATA","SET_FAVOURITE","SET_REVIEW","SET_COFFEE","getRegions","getReviewsForCoffee","avgRatingForCoffee","useApplicationData","state","dispatch","users","coffees","reviews","favourites","regions","Promise","all","get","then","user","data","id","coffee","review","fav","Object","values","type","addFavourite","coffee_id","user_id","req","post","res","favourite","deleteFavourite","delete","addReview","params","description","rating","coffeeReviews","avgRating","avg_rating","deleteReview","editReview","patch","addCoffee","formData"],"mappings":"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","sourcesContent":["import { useEffect, useReducer } from \"react\";\nimport axios from \"axios\";\nimport reducer, {\n  SET_APPLICATION_DATA,\n  SET_FAVOURITE,\n  SET_REVIEW,\n  SET_COFFEE,\n} from \"../reducers/application\";\nimport {\n  getRegions,\n  getReviewsForCoffee,\n  avgRatingForCoffee,\n} from \"../helpers/selectors\";\n\nfunction useApplicationData() {\n  const [state, dispatch] = useReducer(reducer, {\n    users: {},\n    coffees: {},\n    reviews: {},\n    favourites: {},\n    regions: {},\n  });\n\n  useEffect(() => {\n    Promise.all([\n      axios.get(\"/api/users\"),\n      axios.get(\"/api/coffees\"),\n      axios.get(\"/api/reviews\"),\n      axios.get(\"/api/favourites\"),\n    ]).then((all) => {\n      // copy users into an object\n      const users = {};\n      for (const user of all[0].data) {\n        users[user.id] = user;\n      }\n\n      // copy coffeess into an object\n      const coffees = {};\n      for (const coffee of all[1].data) {\n        coffees[coffee.id] = coffee;\n      }\n\n      // copy reviews into an object\n      const reviews = {};\n      for (const review of all[2].data) {\n        reviews[review.id] = review;\n      }\n\n      // copy favourites into an object\n      const favourites = {};\n      for (const fav of all[3].data) {\n        favourites[fav.id] = fav;\n      }\n\n      const regions = getRegions(Object.values(coffees));\n\n      dispatch({\n        type: SET_APPLICATION_DATA,\n        users,\n        coffees,\n        reviews,\n        favourites,\n        regions,\n      });\n    });\n  }, []);\n\n  function addFavourite(coffee_id, user_id) {\n    const req = {\n      coffee_id,\n      user_id,\n    };\n\n    return axios.post(`/api/favourites`, req).then((res) => {\n      const favourite = {\n        ...res.data,\n      };\n\n      const favourites = {\n        ...state.favourites,\n        [res.data.id]: favourite,\n      };\n\n      dispatch({ type: SET_FAVOURITE, favourites });\n      return res.data.id;\n    });\n  }\n\n  function deleteFavourite(id) {\n    const favourites = {\n      ...state.favourites,\n      [id]: null,\n    };\n\n    return axios.delete(`/api/favourites/${id}`).then((res) => {\n      dispatch({ type: SET_FAVOURITE, favourites });\n    });\n  }\n\n  function addReview(params) {\n    const { coffee_id, user_id, description, rating } = params;\n\n    const req = {\n      coffee_id,\n      user_id,\n      description,\n      rating,\n    };\n\n    return axios.post(`/api/reviews`, req).then((res) => {\n      const review = {\n        ...res.data,\n      };\n\n      const reviews = {\n        ...state.reviews,\n        [res.data.id]: review,\n      };\n      // updating coffee rating\n      const coffeeReviews = getReviewsForCoffee(\n        Object.values(reviews),\n        coffee_id\n      );\n      const avgRating = avgRatingForCoffee(coffeeReviews);\n\n      const coffee = {\n        ...state.coffees[coffee_id],\n        avg_rating: avgRating,\n      };\n\n      dispatch({ type: SET_COFFEE, coffee });\n      dispatch({ type: SET_REVIEW, reviews });\n      return res.data.id;\n    });\n  }\n\n  function deleteReview(id) {\n    const coffee_id = state.reviews[id].coffee_id;\n    const reviews = {\n      ...state.reviews,\n      [id]: null,\n    };\n\n    // updating coffee rating\n    const coffeeReviews = getReviewsForCoffee(\n      Object.values(reviews),\n      coffee_id\n    );\n    const avgRating = avgRatingForCoffee(coffeeReviews);\n\n    const coffee = {\n      ...state.coffees[coffee_id],\n      avg_rating: avgRating,\n    };\n\n    return axios.delete(`/api/reviews/${id}`).then((res) => {\n      dispatch({ type: SET_COFFEE, coffee });\n      dispatch({ type: SET_REVIEW, reviews });\n    });\n  }\n\n  function editReview(params) {\n    const { description, rating, id } = params;\n\n    const req = {\n      id,\n      description,\n      rating,\n    };\n    return axios.patch(`/api/reviews/${id}`, req).then((res) => {\n      const review = {\n        ...res.data,\n      };\n\n      const reviews = {\n        ...state.reviews,\n        [id]: review,\n      };\n\n      // updating coffee rating\n      const coffeeReviews = getReviewsForCoffee(\n        Object.values(reviews),\n        res.data.coffee_id\n      );\n      const avgRating = avgRatingForCoffee(coffeeReviews);\n\n      const coffee = {\n        ...state.coffees[res.data.coffee_id],\n        avg_rating: avgRating,\n      };\n\n      dispatch({ type: SET_COFFEE, coffee });\n\n      dispatch({ type: SET_REVIEW, reviews });\n    });\n  }\n\n  function addCoffee(formData) {\n    return axios.post(`/api/coffees`, formData).then((res) => {\n      const coffee = {\n        ...res.data,\n      };\n\n      dispatch({ type: SET_COFFEE, coffee });\n      return res.data.id;\n    });\n  }\n\n  return {\n    state,\n    addFavourite,\n    deleteFavourite,\n    addReview,\n    editReview,\n    deleteReview,\n    addCoffee,\n  };\n}\n\nexport default useApplicationData;\n"]},"metadata":{},"sourceType":"module"}